<flow-definition plugin="workflow-job@1254.v3f64639b_11dd">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5" />
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties />
      <triggers />
      <parameters />
      <options />
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Build a debian package for SapMachine on linux_aarch64.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_TAG_NAME</name>
          <description>The Git tag to create a debian package from.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3520.va_8fc49e2f96f">
    <script>pipeline {
    agent {
        label "linux_aarch64"
    }
    environment {
        ARTIFACTORY_CREDS = credentials('openjdk-artifactory')
    }
    stages {
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage('Build') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/make_deb.py --tag=${params.GIT_TAG_NAME} --download --architecture=linux-aarch64"
                }
            }
            post {
                success {
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.deb"
                    stash includes: '*.deb', name: 'debPackage'
                    stash includes: 'SapMachine-Infrastructure/**', name: 'infra'
                }
            }
        }
        stage('Publish') {
            agent {
                label 'agent-local-docker-ubuntu'
            }
            steps {
                unstash 'infra'
                unstash 'debPackage'
                sh "cp -n *.deb /var/pkg/deb/arm64 || true"
                sh "python3 SapMachine-Infrastructure/lib/recreate_deb_repository.py -s -r /var/pkg/deb/arm64"
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>