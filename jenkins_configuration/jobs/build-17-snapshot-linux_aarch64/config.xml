<flow-definition plugin="workflow-job">
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps">
    <script>pipeline {
    agent {
        label "linux_aarch64"
    }
    environment {
        ARTIFACTORY_CREDS = credentials('openjdk-artifactory')
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init SapMachine-Infrastructure &amp;&amp; cd SapMachine-Infrastructure
                    git fetch --depth 1 https://github.com/SAP/SapMachine-infrastructure.git master
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init SapMachine &amp;&amp; cd SapMachine
                    git remote add origin $SAPMACHINE_GIT_REPOSITORY
                    git fetch origin $GIT_REF
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                script {
                    String[] gav = params.DEVKIT.split(":");
                    if (gav.length == 3) {
                        echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                        sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                        env.DEVKIT_PATH = sh (
                            script: "cat devkitlocation.txt",
                            returnStdout: true
                        ).trim()
                    } else {
                        echo "Devkit not in GAV notation, assuming path."
                        env.DEVKIT_PATH = params.DEVKIT;
                    }
                    echo "Devkit Path: ${env.DEVKIT_PATH}"
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                sh '''#!/bin/bash
                    set -ex
                    git init gtest &amp;&amp; cd gtest
                    git fetch --depth 1 https://github.com/google/googletest.git refs/tags/release-1.8.1
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        additionalBuildArgs '--build-arg ARTIFACTORY_CREDS=\"$ARTIFACTORY_CREDS\"'
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/generate_cf_buildpack_data.py"
                }
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <actions />
  <description>snapshot build for SapMachine 17 on linux_aarch64.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty />
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github">
      <projectUrl>https://github.com/SAP/SapMachine</projectUrl>
      <displayName />
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers />
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_GIT_REPOSITORY</name>
          <description>The Git repository to use.</description>
          <defaultValue>https://github.com/SAP/SapMachine.git</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REF</name>
          <description>The Git tag, branch or commit to build.</description>
          <defaultValue>sapmachine17</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_VERSION</name>
          <description>Either a SapMachine Release Tag or a JDK Major version. If empty, GIT_REF is used.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NUMBER</name>
          <description>Sets the version build number explicitly.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_ARCHIVE_NAME_PREFIX</name>
          <description>The prefix of the bundle archive.</description>
          <defaultValue>sapmachine17-linux_aarch64</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DEVKIT</name>
          <description>Devkit, could be either a path that locally exists or the GAV coordinates to a tar.gz archive to be downloaded and extracted.</description>
          <defaultValue>io.sapmachine.build.devkit.linux-aarch64:devkit-fedora-gcc:21-8.3.0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EXTRA_CONFIGURE_OPTIONS</name>
          <description>Extra configure options passed directly to configure script.</description>
          <defaultValue> </defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>hotspot_test_groups</name>
          <description>Select the test group for jtreg hotspot tests. Empty means disabled.</description>
          <defaultValue>:tier1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>jdk_test_groups</name>
          <description>Select the test group for jtreg jdk tests. Empty means disabled.</description>
          <defaultValue>:tier1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>langtools_test_groups</name>
          <description>Select the test group for jtreg langtools tests. Empty means disabled.</description>
          <defaultValue>"jdk tools lib"</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_TESTS</name>
          <description>enable/disable jtreg runs</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PUBLISH</name>
          <description>When set to true, the resulting bundles will be published to GitHub.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RELEASE</name>
          <description>When set to true, marks this build as a release build, otherwise as pre-release.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
</flow-definition>