<scriptApproval plugin="script-security@1175.v4b_d517d6db_f0">
  <approvedScriptHashes>
    <string>00057a1c4a0fc9d7eeedec3eacc091600e6f68d7</string>
    <string>000d26f37e5d753d85303431b775db5ad5151c3b</string>
    <string>0073c4ce90a359292ed9bccd944e66ead41842a1</string>
    <string>00789f52284d79619635f6471ab6972d391d5a9e</string>
    <string>007ce063f23b99d53c5671c2a90a54d7f99980c4</string>
    <string>00ad26ae64bd3c09525ebd1231db9d1c709dd960</string>
    <string>00c7c1feac16877ccaef3e86323f2ac455fb7256</string>
    <string>00f3b676d2a3ec087b9db50750bc03fb85750863</string>
    <string>00fbf02037947e7e8022bd47f2bb0c42787bdbde</string>
    <string>013dea6a0345f677c06d1eac27c89033dc579247</string>
    <string>013fddbcbf24dca9b793668294da37c826d1e096</string>
    <string>016d233533a81f3a468f9da40db80d745ad4ec47</string>
    <string>017d0db438428731cd600b6ebda805065433520f</string>
    <string>0183aa0e53b267b192e6ef95c3641847adaedf26</string>
    <string>01b2c921b3605e20f8a727b3d587f77a0b4fbd83</string>
    <string>0208a8fe9298f33153199c10ca49230853135c27</string>
    <string>023b07ae6407e2fd657087f759bc31cc44a4eb68</string>
    <string>024547be11fe2a3f5a83bd870812fa55e2294d49</string>
    <string>026156e11302604c384339d226de90f4a9527efb</string>
    <string>0269e9ece75f9bab17d72d99e2d1f8cb438265f7</string>
    <string>02833ddc3a0de53b70afdb3dcc9afabe515b718d</string>
    <string>02b9886298f49bace3572b1dc26c80ebf6a37ebc</string>
    <string>02d49fb3465ecbb14ceb887dc9a4d20219bb0951</string>
    <string>02e33eb5590f878ac7b832cf3f1f7fff0afacd45</string>
    <string>030a8e2ce88cbf5838977c075a7bc1f7b656e1ee</string>
    <string>03265f93590582417ebee6a56d4c96e08fe180af</string>
    <string>0360e586288eb4eb891041417af66f8ede7a46c9</string>
    <string>0361f721c7d7506b5665d4a8f1f0d7752d82a9c5</string>
    <string>03b14daf131d7f5ba7f9cd554275e10f15467858</string>
    <string>03d70d5569902ff8350328586284a8498805380f</string>
    <string>03f680e584dc71944ec5bc27c74974d96e0e60c6</string>
    <string>040b45d569faf0b810a899f1f8f90b95cd540fef</string>
    <string>041682fdba1cd3e060dd8ef5e1ecc7eef46b137d</string>
    <string>043fd6a6498c8a1316335057072828df5fddf9b1</string>
    <string>04cc5de5834a7b4f5a3216144a4bc70e7e9cf636</string>
    <string>04da8edfbbe9730b0e31c832f7eba0b3cd4b819e</string>
    <string>04ff62d602304848d9d06b5715837e0e932efc11</string>
    <string>050ea5c16e6c33f896a26d896fd1b0891202109c</string>
    <string>05e91204268365e6ede35f6064eb34e690d40ce0</string>
    <string>06269a81069781a1a8775387e400010b0948354e</string>
    <string>0688064afd6ad158a7087496d1455655dd21afab</string>
    <string>06a1e9acb89bf63deb84ee1585593e151d14a4c1</string>
    <string>06b201353615f7e64c0f3a90e91e95a134e50536</string>
    <string>06ca4b4bb24d90bf231a462a9c8ea44f5722c3b3</string>
    <string>070028333f163edab426cb12b9a82197ac0eacee</string>
    <string>0707b17039401e40fc3e513bc64fbff2957aab59</string>
    <string>07402b98f57d9c5cb924fb5138de4742acf725ac</string>
    <string>074e6e1c82b91f02e6cce1b263bea4c2912fba4c</string>
    <string>078931b85247262776a22e0275773ddc35c9f735</string>
    <string>07c23ff775a6e17218222b9980ba71d3c9fb8635</string>
    <string>07caf74cf4de69dcea2deb809cd6edf464f4fe3b</string>
    <string>07cda3631348f0e34e377c4896b5e0a3b5fe682d</string>
    <string>07d9fba99ad438eff5ec6d34bb7d8aebb1fdaff3</string>
    <string>0841a21b0b713145ba0a40de00d3d63ad0396cde</string>
    <string>0869ba961a2899e191bb0315cbf4ebfc9a52ba56</string>
    <string>086c13f2a2aba5d1a759092178fb69e659ba34b8</string>
    <string>08b5f657b894995b9a42ee29c35181a546de22fb</string>
    <string>08d7e327ef3e0356672f405f7b16ceaa1c06dbe2</string>
    <string>0950486069f0759eccd0ec73f3c3754710fe62a2</string>
    <string>095e48234e5c8422903480a9d24d6a5de4b3cafb</string>
    <string>0965f683f9d65bdebde7cac4c203e095b138e191</string>
    <string>09885ae2e18f4058f50f4273292d6fd702dfd772</string>
    <string>09998da3ccf277a821fe386e78bc7079138a2d62</string>
    <string>09b6d73259c892b5b6930e42564b1a9673cbb1f6</string>
    <string>09df9c4c4b571ea837c1f85f24de98e62af620ae</string>
    <string>0a43347caa9f526b657f1c42ca3be16148c1f5b0</string>
    <string>0ad7e0d605b6aae7b35a3c4eb40bdda642859011</string>
    <string>0b5d2b34fa12955987c919d4be7bb4b9f6ab7a94</string>
    <string>0b69e0b650a984252ae268f8927333a801e8aed6</string>
    <string>0b7448c4de84e71f42967167371d99d73cb33ce6</string>
    <string>0ba5a9660d0c9f44ecac98a5da34d9c91a28f584</string>
    <string>0bc71def73d96b425ec187bacce70ff3e62b287d</string>
    <string>0bf82605ff1dec4dd6d671b13a2f9f404711e004</string>
    <string>0bf9bf3e66abfec1964a4e01db1d74a4f19799da</string>
    <string>0bfae6514b02e31dad9ebb4cae513108a77c59e3</string>
    <string>0bfe90b2c3b3a7e4cd2f0fbaf63bc8b3e1a3d386</string>
    <string>0c42d87277a9aad7a1ac384b3ae39a4e0ac58852</string>
    <string>0c67459ad7326c1cfa6218f6e63794594f8f1747</string>
    <string>0c797ed0f834cf481c9789963216c013b83f1831</string>
    <string>0cca8dc6dddf9eece7c83088a56d85eb620e35e4</string>
    <string>0ce4ad033926755bd554b6ff2653b7c26c0e6a2f</string>
    <string>0cf2a70c8cc1e1bbeee873b340b526d09a06b8f3</string>
    <string>0d082c00cef9d619bc7f60b30fe3a558cd391f7d</string>
    <string>0d4301fdda0aa9330a6b660b9c74b582adfb5299</string>
    <string>0d4ff4efd9406df789ec40235d57847657e387d3</string>
    <string>0d65370b22a3d8c69dc98a76c181f47292bc3a0b</string>
    <string>0d95185ade728f5c6675f016697b2c8421224995</string>
    <string>0db8c0c7bbc380ffa6367d0c79989fd50924f067</string>
    <string>0df6906c454dde4826640247031168988980c472</string>
    <string>0e023a0ac8f4d95f85f69d8f128d3b9c14f5d9a6</string>
    <string>0e0cdc0e50754d54c0a06cedbbd7efe1335aa637</string>
    <string>0e239436e7c205fa79fa94c76a25181fefb98775</string>
    <string>0e4b17558a791b90286a6c9503f0d7034c2ae4ec</string>
    <string>0eaf111c0b70d3ff1750f9377f70fc5ba5cbda12</string>
    <string>0f02418a8ce6bd5f947fca83e13bbb7bac3ab07d</string>
    <string>0f303423b1f6e9cebd1f23ca178e77b01c1eb33e</string>
    <string>0f49ce389aa561acdd62ee5758cc5d7b2214a6ee</string>
    <string>0f72a35b81cf38d52de07bc7f0f3d6f4107e2ef3</string>
    <string>0f99c3cee956ac4336e095bcc1a3134ce222b974</string>
    <string>0fe2c512f3e7c03cb976160be412633fa111d4fe</string>
    <string>0ffcbb91807f39402ae5eb1f7b6af91ddf7c66ed</string>
    <string>100764d1e6716207f47ce1cb84ac8030cccbd653</string>
    <string>103f9c5a67cfa1067539bb503cbb134e7acf5cb2</string>
    <string>10452f738dd3a4a5a0de74d3ac12dd4f774302bd</string>
    <string>1063404d5a1ad302fa7dbd3e69734a32bb98b790</string>
    <string>10fbc28e4dfb741843505a6c210269ca1f28d323</string>
    <string>111032f4f7b70685963786e548073e27595c6e70</string>
    <string>1116b81379c784f729b0428ebdecfbd83314a0ef</string>
    <string>116bf6ebeb559b9fc9f6a1e5f23de207b08a8e87</string>
    <string>118b6ce16d07b2bec76086b9540802432d19455f</string>
    <string>11d7a1226448c3acc79fa070cdaec74d46733b7c</string>
    <string>11f38c44b21ee47044133e1782387d7a1bb4db06</string>
    <string>11fbe389f2a704ab082ed08395445ca6a84495c4</string>
    <string>1287ec16652ab7faa78a19c8ddb7fbf1328f75db</string>
    <string>12b12cc770bd365c2ace1a611b15291a07c223e3</string>
    <string>12bb3bb193fc304fb33d846f995c5b7ff4d0bfa2</string>
    <string>13133f610224895969d36b24b054c91b3fc2b76e</string>
    <string>136889ca8e8dafcd0153fc88ee5af7a3e25cec37</string>
    <string>13955dbf9eef87d0848ad23581ee75e5393675fa</string>
    <string>13c29fb5ff876c113ee8298a9f67ecf1bd585add</string>
    <string>14087dc47932473d34ccd731231097bf6202d7ab</string>
    <string>145b8af937f944eef380cc403c7e943cad1f54a5</string>
    <string>147d7174fff4ad1d01d8a4dfa61160531bbef336</string>
    <string>149ed2f41d1dc03b0a2e78c577e6a84b1ccccec9</string>
    <string>1548a901a64619af1f821bdd5a3e3ba292c0ebfc</string>
    <string>15817fe76ce7a71a5002179c9164ff57f0ce6097</string>
    <string>15945887179adf8647f3e81a12a6afdab9da5f1e</string>
    <string>15bd10c42ac67b16fda4cfff68ac1a07faab68ab</string>
    <string>15c2faf76318dc64fea1b2ffeef7cc1eb01d27e7</string>
    <string>15f67f57316c8658f96d956366477ae801d2fae2</string>
    <string>16668660b200a0421d377ec60fb205424760bd41</string>
    <string>1668dff5ff54b725bbf9bf16ca395b8c5084012b</string>
    <string>16ad9cfb199b8ba02279e3070eb36c1133724e68</string>
    <string>16b85581fe9904a9bd4348d83618e0e9092bdd40</string>
    <string>16c9c52e4f4242109e90de4b870e1e12f1ce3260</string>
    <string>16ce2bc4682d71f87fde7a9ff05670bb031a73b2</string>
    <string>16d24ab4d595203237a218c1cf53b399178b11b3</string>
    <string>17141405c4541978d209f5b6a702edbe5757e8f6</string>
    <string>178a7e974115eca58f79100e7880ffe4f7016af3</string>
    <string>17c4c0c323b79264b5115b7467bc46461414b8cb</string>
    <string>1812dcbfea1cb371d3738d8c1a6550e2c2a1cacd</string>
    <string>1895e2eab1f9654637d9f1dc0ef9b0152fb5b911</string>
    <string>18b42787469764b262279e8aa6d992df59adf5c5</string>
    <string>18e22ec2e52353eda975c503d4a5219527293acf</string>
    <string>18e660d38b67494d350e6e9daa93b95dcc6ccc97</string>
    <string>18f62b40c47a141e9be7c6c6ca6d44bbe90e61f9</string>
    <string>18f88990ad5d21ffc7dbb661a66f4e8513a42917</string>
    <string>1951e83fe398cdeeb57a57d29430ad033c3d7734</string>
    <string>197d9cfc28f4d77bc79d0d2bad66ea079bf1f8b7</string>
    <string>1980ecd4a95da86c57a6e2a557ad0e0fcb530531</string>
    <string>19a7a05f696fe30e086e14abd0a71c7675a2e9f5</string>
    <string>19d8701354ee19d1062a58d39054f668b46c0147</string>
    <string>19e84620f8720f0034f1fbfc9cf9911d80d36e3b</string>
    <string>19eb17aa98ceef2b11e1080f1f845fe10f476b2f</string>
    <string>1a6bf2e5b0af2a3a68fc2244c219116b4682d0d2</string>
    <string>1ac2237fe93133b343144da73592d1bfb4c3fbe2</string>
    <string>1ac7e56aa5965824649d4ff55c3336600389095a</string>
    <string>1ad142f83b28069ac760b0a74ef489d5183961f2</string>
    <string>1b0539038700a0e54e9d9d2125c62cef7a220adf</string>
    <string>1b4e16ccc63fb7c1e9a0b815d4f57689d0d5e909</string>
    <string>1b75548a33eee49ca790ae9fac34e84aa4f730d7</string>
    <string>1bb323fbce0da87e432deeb333fa69ecb23a79c9</string>
    <string>1bd8056be27eb4f0f238c1c4343b48c5091139f9</string>
    <string>1c01c24f83472e01f1cd2b84ef080da0736e6eeb</string>
    <string>1c03f1ae30c19197031f7279d009896550ff7a48</string>
    <string>1c171d8c97befdb6c32975aeccb407a3c1b5b716</string>
    <string>1c3efa633a45b5c671416cc0c4d5c10a65d0936b</string>
    <string>1c495b336a93ae5698dc00fb726d60301ab11e26</string>
    <string>1c6c20957b9772bfe0a131a56200c2c066ba8bba</string>
    <string>1cb682f3f18ed656c94fb723a605ff9bf4433c36</string>
    <string>1cbf697b9ff4a07d3dde01da1acb76edbb5d0011</string>
    <string>1cc3b8e65183f7fd5fac532ee508557880632504</string>
    <string>1cd0425b0437a301c6536c99a2108a51125c54c9</string>
    <string>1d0344943108a5366e04df3000763a5344c5f387</string>
    <string>1d8c22fb22c7ae9240d6528ccbac09f306fae3f9</string>
    <string>1dc6f783ee3481f8e3d2a3dc2b6f75c005ff71d5</string>
    <string>1dca01b939191e7577c256c424d3cce0a27bb458</string>
    <string>1de18e486825292bbdca03721340ebc521fec191</string>
    <string>1de8bbb806700a35e0c4acbf3e64ccd1e94d7a8b</string>
    <string>1e186cf3b068785633bd4a6cd0fedea9a7539a0a</string>
    <string>1e1d084d385655edd8ca51691a45f97c4ad06638</string>
    <string>1e6620dd42becdee4cd349cd765043888c156933</string>
    <string>1ec00afe8a4ecb6c34aa103e28b95fc2e26de5d2</string>
    <string>1efacadf2fb3025482123ea8212dbad79395ea3c</string>
    <string>1efec8fcf760966cb87829c54a2e28da9f8f2c06</string>
    <string>1f31055f95d709dd19e447606386485bae338e73</string>
    <string>1f3cfabe0b3de1342d1a93b10de4fc6331cd3866</string>
    <string>1f4109c480527222b5b632d0c1d9d01858d7ac4c</string>
    <string>1f8635b123ec7fda7e19c41a3f5c6443c0949452</string>
    <string>1f9e4b54d4db3d740744d7d0d6501f8f20ee2b3e</string>
    <string>1fdd0cc449b2121e00f085e4f0ea089cb8d0501c</string>
    <string>1fde85114b8ff81842b463f5af0ec8b92cdb4efb</string>
    <string>20713a983ca89f0d8c4fb3fae30fd64292617a74</string>
    <string>2079e0f3b54bf08041ab72b3de757f5eb695c7e7</string>
    <string>20bff725fced7aa8938d512781955dfcf1073da0</string>
    <string>20d5945d8442facdcfe572ee94fa4f204e522389</string>
    <string>20d9dc41c27c4da832a1ce768dfbc1881f4720a9</string>
    <string>20e469997dd2f974b42a9e23095e494b343150db</string>
    <string>20fdb64afcaa674cea2398329778e229ffba642d</string>
    <string>21079385ccd4a4c148225483ee9abaa8a1fe9d27</string>
    <string>210eb9720f0409180791324bda1155edd66f7366</string>
    <string>210f868a7b82981d7a03a5079c91321b34bb2696</string>
    <string>210f8c0b775938adf6c1122d11a48af68c564175</string>
    <string>21354be6243cdeb56df06f8fbabe3831e54467b5</string>
    <string>2157df9a293d7a6d2214a7c026cc6e642221eee6</string>
    <string>218f3b36c591d63b0544589a468ef1c566fabde3</string>
    <string>21c6ebb15e669dc05d4eefa97be2fa9bdc7c2637</string>
    <string>21e5700deb4ad1e1e56bb8404eda0ba2c6c36c7e</string>
    <string>2267324c48bc6d6a5468f219256fd8e0619332f3</string>
    <string>229d3e4b5dee33a4e4b9ee6675af845eb5b674f3</string>
    <string>229f21911472ebcf2fe5ac3e5663f5a3332e6467</string>
    <string>22e884eb7169bb439104730903b636b8689c64b3</string>
    <string>23744a618e39d998d6637ad2b406ee748c15502c</string>
    <string>23a7d762b15f689f97f5d627ecd209779051ca13</string>
    <string>23ca5f4434b9bc69da13540774fa30b432e58ec2</string>
    <string>23ed0034728d6674f7753cb4ced472b0433eb3ef</string>
    <string>24250f37e0238d2711c91881d448195dd6c0e6ea</string>
    <string>2450c2e0945439a06d9abcb444c8b28ae34b9d2b</string>
    <string>24ba85c53d7ad38dd721510f65a8e2c144b644b5</string>
    <string>24cb54161ab91ed608a1bbc62f574afd90f7465b</string>
    <string>250f5cb79baee54885d894245ab584ee5fe6e780</string>
    <string>254d4384f152cf6ae81c230319066df8d6e42195</string>
    <string>2560586246685efc65e9c42c8cd40f61b866078e</string>
    <string>256165b8dff06d4f0cc90f02744386f0abc27039</string>
    <string>257b12e31facd45072a61501e1bff595901608a7</string>
    <string>2594376789112c8a8180e8d9faeea1aff760d1d7</string>
    <string>25f44da7e142f9b019af2c3f033d2a350e35ef4e</string>
    <string>25f62c0a9652cf1e47c92f6075ce588ba19b67f3</string>
    <string>2623e16f9fe02e0abc2dae336edc191079c5099d</string>
    <string>262e6b276e627c398f73c4d09a5b455b32f300f0</string>
    <string>2737e3b220c6ec3aeb956b2a319482471587b8b3</string>
    <string>274049526086b9128a57fe48cb38ea0e1defeec3</string>
    <string>275cd4d9effa7d8eefe056ccd569357edddb229e</string>
    <string>276e56dd43a3ce5f78da0da8d091f9052c6d01a4</string>
    <string>279f60127d2a5ca010cbd33b3524211be6f37fc4</string>
    <string>27d580d60816e7636dd84c80c8beaf3fa432808c</string>
    <string>27eba1f6c4e23de5edc25b90a1201f0b819e355b</string>
    <string>284470fb8ae0fa96338b7a253f698d6265e3a553</string>
    <string>285129bbe422988fadfa37ef03c203c06f2c92e8</string>
    <string>2884b7ffaec8fcdca32605b1535833701835f7cd</string>
    <string>2916061ae294a926e36410a996a5a32796a71486</string>
    <string>2918a6ed584b2a374cda4bd7a45f4d0facae2ac1</string>
    <string>296504bd85aed84891904b95e6c0d61901c9a629</string>
    <string>296991405334afce97ebba2da7eb18625256ff52</string>
    <string>29783a7b1526457ab00a770824f9fe11ccb88063</string>
    <string>2989a76d182ddffca03e776ef155616ad4ae3732</string>
    <string>29975e3a00fc15bd7ba401064ffdc6f30486f6a6</string>
    <string>29c832fea8772faab04374b2e2b526a389be6ae5</string>
    <string>29d922797dbe607e9f9e28a12df1c6d484996661</string>
    <string>29dde9d55332f6f8c6c4afd89515aef5c2c2a474</string>
    <string>2a169c68042fb74fd40e45e6e40753d93738e7aa</string>
    <string>2a1997b4abb60e82e0c89832d0b992d1e001446d</string>
    <string>2a3b1ee93d7706c0462785456d58b62508fa1926</string>
    <string>2a5787a819fb526d1195abef370202ac802750f0</string>
    <string>2a8d97ad8ae1e7c3567aceac319c96c30f5d50d1</string>
    <string>2aa1075f9848384991a63dad89b4bd1fd38c5e5c</string>
    <string>2ac14add23dffdefca28a0a639cd40ac5bf5f209</string>
    <string>2b11e2642fa10c4f37872937de922f68b30ec81c</string>
    <string>2b1356a6108ff9837f8136d5b2d751443e16c43e</string>
    <string>2b158c2ff48a56bee3fa5ef59d5d0c72e57042fe</string>
    <string>2b4d46bbc43af7921d1738ce04b1f3a7e7393b71</string>
    <string>2b6ea641fe2d43b6e4069d389f9b4941e238c957</string>
    <string>2b9d0351e574f32291a38b58ddcca26a24bb1567</string>
    <string>2ba0aae04f7b8b00a030013f173b4cb89ff56947</string>
    <string>2bc540d4fe241b8fd6807cae93c794df87189b5c</string>
    <string>2bd04532972c9e5513c99845ae36f3ec7dc104fe</string>
    <string>2bf6c13fd2fdd895083e9263748f92a24446b993</string>
    <string>2bfbe0331ddfe74d938ae4031fbbdbb780965b78</string>
    <string>2c14bb8071c3bf1ebbab0a5acdab63f6ff891756</string>
    <string>2c36f615c32ab20d761be7932cfb5a2437d26280</string>
    <string>2c8314eee3a2c6e64f7ebb63cb408988bebf3810</string>
    <string>2c98ac2d47836ae9557d47a1827dcd0c184223ef</string>
    <string>2ce9fec93386e63729d5c3a85b50be33385ed81e</string>
    <string>2d3406569ec0e39d2c60aa8a5518012dbe7775cf</string>
    <string>2d796d75ab2c6aa24a4a7b8e87f2dbca39ae53a6</string>
    <string>2da0783862ee0c87330d86659b3242af6ee2e9a8</string>
    <string>2db22c50ca2759dcfeb8f20d3ae1f4723b5ae568</string>
    <string>2dc152b4222f1f59bf5609813d76418072b6dc73</string>
    <string>2df353e9357df0e6ad977313f0b37985a22ebed8</string>
    <string>2dfc63cbbae7a6927eaadd4552cbf80871d5afde</string>
    <string>2e0adae7e74d818591e44b5dacb2f133c988103a</string>
    <string>2e1899b7197fa3f9869d19a2acbaa96b09e99573</string>
    <string>2e2809c708d91c091284d261bcc5246657487d63</string>
    <string>2e9c77d83bd76de7026391d78bc997c2fbb93f93</string>
    <string>2ea944953f996256d8e5b93e0230000ab7ab01c1</string>
    <string>2ee148a137b7457ee3ac7fb3e56f57ffab60fc96</string>
    <string>2eecf22fa327e12b92d41ae7e994509abcf6e636</string>
    <string>2f014465a3a271c47e645f174208af3df0078282</string>
    <string>2f21f1cf94a7b442ebb34c91058a0989778222d7</string>
    <string>2f23c0d252d6fefbbf7be674d60ad0611afd41aa</string>
    <string>2f38b447762cabe842f09aee78dcaa514459fbd3</string>
    <string>2f3d72ec42baaae6b724157c8f7bdaf165ec0f93</string>
    <string>2f80bb5c58b4ba17a1d62ef281441cc5781841e5</string>
    <string>2f9c701e0ffca76bc4ea42accee1e1e2f6b67333</string>
    <string>2fdf2cedce45aefbee7bfe49e3ea40071766dc59</string>
    <string>2fe1a0e62071a37b2a5a6a77ca443a9d47c3b525</string>
    <string>30244dc519cc9229342627279f124b75abefa935</string>
    <string>3085bc03e3812597415c2f0a35d1398af5fec721</string>
    <string>30a1b006abe0f756b895f0388ee2ac255fc21295</string>
    <string>30db0d307867ee4b7a26629c78a6c28a4199640d</string>
    <string>30dc4b92ba0dae1793c4ac80a84b30902d35e786</string>
    <string>30df7056ec64774b379773a5e00fb412bf74c1b7</string>
    <string>3103106c072b9ab3215000ceadb29bbcd3630582</string>
    <string>311e89dfe6978ef9d39945775cc4270edd56c4e7</string>
    <string>31221859280978b27148b976aef9f3ebf0ada0ee</string>
    <string>313711e9bc4dc50c93e7db6026c4558ea20540c7</string>
    <string>314b19fab77e5f037cbe2212bfedae6bff125f19</string>
    <string>3177c36ab1fff4eb5e27e07dcb7ed7e49d924335</string>
    <string>321ca6472d0696325e4405c81bf3af169ed7e493</string>
    <string>325438c3efd8199c153463a8354505c4f82cc586</string>
    <string>32baf5eff5594d4d5934440de34aa0957db05aa4</string>
    <string>332f37e5dc2df6daa6bb26c100cb7dcb1c28915d</string>
    <string>338d99544bd188b539602770b52ed50812628cda</string>
    <string>33919baeba52a3ea89aba4bd78c366d0c9afb4f1</string>
    <string>33cb68e23eaaca9040096314a1982005cb29f348</string>
    <string>33d662c77e2278887a82dbe0c25cec950e406de7</string>
    <string>33e92127f2ef26d3701a9338e796738d05a17118</string>
    <string>33f30e4a303b31b9c29ec66ab8a10afbb38e42ab</string>
    <string>33f3c453f86401c02ccbec442d698c773f0695df</string>
    <string>3476c453a61be7237af7a3829e32d82963619ca2</string>
    <string>3499f919c267be0aea1764d336e0f5aac42195c3</string>
    <string>349c3c7d464b1d73347f608a018ca590958ff0f5</string>
    <string>34a9a2c7e6fcec99765d611b267893731199d33d</string>
    <string>34cd3ff92e66172c8ff273bf141c095e8a0e663e</string>
    <string>3555fa838357479e18dfca767339d3b4588715af</string>
    <string>35e1aab9b03f233585f7be3d16f78701c865a41d</string>
    <string>35ea5f8cd3ecf04ab773be54db82f3339ed9dea9</string>
    <string>36174dca8a72fa9b3dfe2cdcdc5ada70d3fc6924</string>
    <string>361e58fbabc75e4a797b5e132f75aedcb8a5c44a</string>
    <string>3634dbfd3debc90fc2493c158624a436a5ca64ad</string>
    <string>3642b7cec3b76e59e6ea0b67e17ca084f952272f</string>
    <string>368b7a12fa65dc4bfac0ee5c271a990f2aea9e65</string>
    <string>36e84a500c42908a8f10ab2314896c8e972f7f2d</string>
    <string>371ee4e8cbb3aaec4decc647925e48732aab1a98</string>
    <string>3720d42944960b74ff8c1b5c9e9f3b0fbef2bb07</string>
    <string>373009812a64ea46c3eeb94bdc8f974b8b12ddc3</string>
    <string>375582d65f1ef63d8ccb8e03670077888d2f5b56</string>
    <string>375c906390175885b3a5f3e3612f3d2442fd3c7a</string>
    <string>378a693d6dd0964c100c9afaf68af7ccfac6cb86</string>
    <string>37adeeccdc169db32b462c478a0ad446b660e2de</string>
    <string>37c9d593c3830887ab520042084c1f993310af5c</string>
    <string>37d7e58ac6554e02526f94eb25f74b0a034e3bb4</string>
    <string>3819b09606d2ccbb4d539730cae925805b3e6c47</string>
    <string>383e74e4658bfe6130d7afdec5433f226026bf1d</string>
    <string>3851f030f4e80e01ce74153a1597b8b0a2ece659</string>
    <string>38714cdf2fd0a0ab8d5badf8d34a65e508c76c3d</string>
    <string>3888d7558764e037a02c98894f886a65c3d98491</string>
    <string>38d6d1a91c1028bea4e0c193507f492943f55933</string>
    <string>3939ff49a1961f415b368a44d5730690a0cdbdc9</string>
    <string>39431502dd89e5c2e6f1184ed2bc246230d9ae44</string>
    <string>39451f49878b0044e4b6c10b9ec0298171ea812e</string>
    <string>3947905323553340fa0bb15ad984908dfc38b9bd</string>
    <string>395389c3dd8755cd95b88b0fa74be2a6dbe753cd</string>
    <string>39b2c520f81e80df454ccc7986528df507039f97</string>
    <string>39f8b9787c9b3d26f3db2725aed5ba16b7f84da5</string>
    <string>3a89735a58ca258662630c00df4353d9c07e5a03</string>
    <string>3aae1ec18d7d1ce511fc8986041b0818102da883</string>
    <string>3b02bd0f9f2fea5c35de613af0c8de0bf4a501ab</string>
    <string>3ba9f282aba86d2b39d24d439b2201f89ee79414</string>
    <string>3bcd7284c15ab1ce726d5e00580c4b898b687f03</string>
    <string>3bd186a5d1be6fb700bcee5a078bb3a8ce52f747</string>
    <string>3bebc189444fe608fc99e2bbd7f4caefcd416581</string>
    <string>3bf52f2473f1014cc354a74fea5654febdc122f1</string>
    <string>3c3b94c80a93b34c5cc3eaf743c1979a5d89f28d</string>
    <string>3c5042e69910c688794cd55c4cf884892f935753</string>
    <string>3c5389f96817d35bfda2e22bb79f94715250f173</string>
    <string>3c695fd338c4674b4fc44d655584e1cdc8cc6711</string>
    <string>3c817be53dfa3f43e0dd85aeee03b5e4e859a5b1</string>
    <string>3c8216fd443130b3603c06fb533057fced573c2a</string>
    <string>3c8aed5c76132c85c149131e6113db4ae17f2ade</string>
    <string>3cba1d90366c3ea2121d2475267b0175c8ec983a</string>
    <string>3cc55a60018859bacb084777ab59bb7ab47fa92a</string>
    <string>3cf28edcf5ce99de4906dc0b0aafd06f7a0495cd</string>
    <string>3d0ee0d658479b19200a58329f30f511d8732345</string>
    <string>3d23ce00ab693c3e0e865c07a439a57d289cf016</string>
    <string>3d528d0a9b2357e2f8fbfd709da2929fc83662b1</string>
    <string>3d68deeef90c3a94c77f0967df3dce24fca4e6fa</string>
    <string>3d6d022d864132de660a73af652378489e3eabd1</string>
    <string>3d78c792e6084fb23d59a3986fd46c603a0f36c5</string>
    <string>3dba8801519a968830ccde9af19a1e24d9229b8b</string>
    <string>3de76078d883273bb18f1f741d79f30c8dc81aa3</string>
    <string>3e59411ede7176dca6e89f65123ded3e7af8d8f5</string>
    <string>3e8c6ac5054d69e47d63437d4670e027103c3ec9</string>
    <string>3ea8770a14f3c972afa3133c13f02449237bcef2</string>
    <string>3eb6d1d6a1ec65c92b48712e545c7af99cfc28b4</string>
    <string>3f072c6341ce4345cc818369a3da9dbbf7ad57a8</string>
    <string>3f10ff4c09c4da7b86f366a9547b2f21c2a65097</string>
    <string>3f2b080a5d47243604106251a514ab93016d7846</string>
    <string>3f3a63d4da13b4ad86b16c016667408f8f5bac04</string>
    <string>3f3b92d81862a1e7025f62d5f5e8781b56ac55d5</string>
    <string>3f50499dfe442956fe3f015e75d7b8741f64f315</string>
    <string>4032e43aa828bd0c0b79a04ce1f27db3c1d67775</string>
    <string>4038628493816e85bb00544e0d461cffb04e2c63</string>
    <string>4043f8e93c79edc5d02138b58c679326be90db71</string>
    <string>405f8a899525db29e970a7d743c88f8665676753</string>
    <string>40ede0de0f51841b3341ff1aaef7f7f1b6faee06</string>
    <string>415e5dea27710a51eb3057f8b52f4277d7f2c8d9</string>
    <string>41953722eb55134ce0b93e7cc6784d6a3068e1c7</string>
    <string>419b8b97a2acd43be0bcc94a38598a76fa8724b9</string>
    <string>41c70b5f9140e0fde08a7af5a0954c11d38d969e</string>
    <string>421497a773b9174c6634f368ba53ec9e218d5793</string>
    <string>42b76c5d711736495da4da3e552a50849da06932</string>
    <string>42c9143d315ecc03a3231901cde932ae37f28629</string>
    <string>42dae5c64324aad6341ade5841e6c69c6ee8489f</string>
    <string>42e45160236ec75b30643cb72f36dceff0ef21eb</string>
    <string>430e3d489a9683bbb615406282d780943a899693</string>
    <string>4349a0624651a130174ca184d7e4e29b5e533612</string>
    <string>43a11413adcfe7f2e20d517c454ebb06fdadedef</string>
    <string>43a3d164a72dea13249686daab7e8da53ce96481</string>
    <string>43ad9ddbe76fb80880f8d09687a12c9eb5c1c49e</string>
    <string>444cf2485a337a486b8bf174b7793e2f3195cc46</string>
    <string>44afc7be437c7577709a60305e8c157850cf1bcd</string>
    <string>44d003450c312ff3133bd923b837bb358d832615</string>
    <string>44d72ab06ff3d1bebdb689dbf672665a2a401132</string>
    <string>4513e96c649b9184d767db0689a359dfc2537e35</string>
    <string>4522449ff359d40d011d6d8496b92ba4415933b1</string>
    <string>45233bc1743efcfd42293620e068e7284f301397</string>
    <string>45482cc83ec19341cb1389d339faff1ba1d9d83f</string>
    <string>45976f85a072c51f728e20e3adb42fe84ec9e8c2</string>
    <string>45a93f28083ecf0eef8e01240d6fac40941ac4d8</string>
    <string>45bc942130afdeedec7c69e778a4a04e53fb2e8b</string>
    <string>45eebd52e114c36c2407ac092b8f8b17986fa91f</string>
    <string>463550a45e2307dc29946490b8e6475579a9120f</string>
    <string>465abf0da2ce87ba446362c62ee03c15a719ae25</string>
    <string>4686b860e66a98e6360b3ad1ba33003e6d08db38</string>
    <string>46cb69a537cc1fe321e82878b17eda5cdbc88f9c</string>
    <string>46fb4e6c5d7bc5b512d6a50bb5e35929c1ee24f1</string>
    <string>470e72b1ebe7499d8d83e8090224aee6b4b0bae8</string>
    <string>47494f04ae4f01a97f5f52d0cfcfbf646138f79e</string>
    <string>479284bba37961518239b723f4091ca27f319251</string>
    <string>47f524db81e81cd004b17f2a9d6b018d1387824e</string>
    <string>47f81eb5a82f0d9d07551a28afd4a1116656bb25</string>
    <string>481fcd14af29479dba22dd713cd0a0dd5200b62c</string>
    <string>48429cc7502897ffda21d74ce714ed677f1925fb</string>
    <string>4884bcaccc388076a1c942b819c2cba5dc241979</string>
    <string>489823e01799fcdc8c1401e670b9b761fbc0dc3e</string>
    <string>48be5ae2cc0307a3099dade6dad29b53824c9c2e</string>
    <string>48cac9af0aad604c9d51049aa5df3ac1430e8172</string>
    <string>4911b30b91b53dec0fbc31e37e8754eb8227cb23</string>
    <string>493423fedcabe6880e9d16c4981aaeca33fb3b4e</string>
    <string>49699dff82756e65360c9c6a5aa21409f44f0aa5</string>
    <string>49f493c2936edfd42eb3950dc34a1b90b9f76a40</string>
    <string>49f61ad9e3dd9cc746afa8fe986690c7d3246182</string>
    <string>4a506cac939eae242c2a7684fd6badd92692d827</string>
    <string>4a5814ccfb44796fd4ce563e984dcbdf8f51c0ba</string>
    <string>4a67641d3685528fd0fcd79fa11359da5c923547</string>
    <string>4a6f2840efdc514565eb1947425cd46e11c49562</string>
    <string>4adedcec2387f75cd0a5e2463ce6bb0c26a21047</string>
    <string>4ae8b3adb03200229b714ab340495adb4edbe70a</string>
    <string>4aeb82aa7060facd49f4d4354fffd29f5b1b1060</string>
    <string>4b12b1e5ece4449ba51d9b5623ad0b4114ec74b6</string>
    <string>4b3640edb094d12306b9fb506c0a06cb01966d62</string>
    <string>4bcb009a6cac986c536a0de546ca750f9edd5d1b</string>
    <string>4bcde27869f2aecc0d2e345f3e3f1e73b0b3097c</string>
    <string>4c51897c4b0056bd3a88b98cf762659774cf93d6</string>
    <string>4c697918e50693070c8ded3a3bd053004c3321ae</string>
    <string>4c79f6aeaf46f9aa423c205139a5587de65f5a0a</string>
    <string>4cf224c435d21501d1ea226961812d61bd528333</string>
    <string>4d26b98b6ee75914becf6a411d7a846e26abb926</string>
    <string>4d2e9d62dad4e8e18243aa126724412b6eef6403</string>
    <string>4d4f50e3475ee699c3310377c30b1c841f266551</string>
    <string>4dccc253a70d83b17d295e671f0d24d5242fd584</string>
    <string>4df1ad3b30ecf117976ef464bd09d9966bf5ca69</string>
    <string>4df2124eba8e81478d2126d6474aec25030ed333</string>
    <string>4df9a2edbcf994470a06af8de1b5d1d048d1add4</string>
    <string>4e163d4816c8f29e8d6b0a5a10ca8d1ed26192e1</string>
    <string>4e1f7166ef8ae0f0fdf3c7a8549d6bb69c6ceed0</string>
    <string>4e89d71d09d785207729c7e5ca6f3be5542893a0</string>
    <string>4eae63f2b66ab6ebdcd4e3e2454ca8740a1e624b</string>
    <string>4f3e9e32f4a6ac038b9331306dcb5e7c7593129b</string>
    <string>4f53fe314d053354121f8f2789e6bdd4a423d81e</string>
    <string>4f8b39d663eab4e929d91003c63a7a135f0dd049</string>
    <string>4fc0364f96872076d5985d00aa120af2e568cdb4</string>
    <string>506121398194cffe281af38bf1d96a03a7be68d2</string>
    <string>50f3d4c58a9166e88d12442d4e6cc301f1dc2499</string>
    <string>514d32129385ef4573728a415187c03352f151f9</string>
    <string>514d44fa8940ebdee1257e223229cbae3ca59dbc</string>
    <string>5176f7772a4449ef7ea37d6ac52e5ad33d7dcde0</string>
    <string>51848edb5ad7cfa5be1431e3d102b8943a7f1aa6</string>
    <string>51f5dd36d9a1c8fa44693cd6ea21b2219bc68ec8</string>
    <string>51f977c180b5b83c39d9c947281edc0729bb1b76</string>
    <string>522a708f4134c2dd0758a768b7fd0e6b346de7a3</string>
    <string>525fd1140b0c075c4043b7966343a42332926805</string>
    <string>52713c789918e8a24d2ecdecaafd2818f3af0318</string>
    <string>5273dc0f3aacd2adf48942094493fa8429a38350</string>
    <string>52a1c7a820013837080c2f2300edad3f7e23be39</string>
    <string>52cc0de025ea9beb52e1ef2e533298088f646e61</string>
    <string>52e97cffe91f041b9626bd9e342ee0e2892daedb</string>
    <string>52ee0e39e897545255efddbf7e8563ccb5c42976</string>
    <string>530e0983d28ef84c66e5c031101567efa4132334</string>
    <string>53260b045b72c0b615077446a677a124bcd4249d</string>
    <string>533a11a00f676b3b12dc38007e2049e058e31e69</string>
    <string>536e3f882eeedd11a1dc1b2ad591c868ed753bce</string>
    <string>537d70351dc62ea15ba5a197b477ab0c86563000</string>
    <string>5398c8466cb15f644db0035e154b2d4d8597c7aa</string>
    <string>53d49903838667f26c20bd875093539a246ba6bb</string>
    <string>53e6dfb09175058b6001cf7b0edd03f002fbfb87</string>
    <string>541e6cfc31906a9e873579701bcc83b7f970a968</string>
    <string>542be89bc0121cbd116a0e2dadc43df446d3ef3f</string>
    <string>543b835949a2334bf1de77411cbe5a920e10c84e</string>
    <string>543df1fa73aaa25a5707aa5829fa972c1ea3cbf8</string>
    <string>547596f9e1e35ab59c58137234588d5d6eebd8d0</string>
    <string>54a81df4edc042f27baca1ebf297df6eb3fde772</string>
    <string>54bea3763799e8e1ce2ff261ae5f44a7eb844100</string>
    <string>54eb9a702260b82dced1e3bc2ad91c05e28e48e2</string>
    <string>54fcf3f0b4b4e828cd3a78b2a65cb105da9a6061</string>
    <string>55197ad67478573659910d29bcb67b8eef6f507b</string>
    <string>55915324682411f14ebe1c93b28aaff0adc030ce</string>
    <string>5616afc1de0a879fba2b90ba6fbea40adbf0af56</string>
    <string>561fc9a25f0c7af7e799c6e3b39d8734a2a10dcb</string>
    <string>562fab3fd3adc564bc5bf4c8ddb171f5a2e4124c</string>
    <string>5684f8d86d3d9c7183708eaca21352b057241f24</string>
    <string>56977b09c3d18ab60bd5e160ba93e674134d82e9</string>
    <string>56af96856051f42ca58c35f2592147510308786e</string>
    <string>56b395fab7eaca08ebe7abc82333e4b851a11f2d</string>
    <string>56c92964bc71a10b40f6aaa58e74d36b93eb9f28</string>
    <string>56eac05c77be074f29f776e88b244cbf3cc8e38e</string>
    <string>56f8f37cb1221e4cbf2b85859138307ccdb07a5c</string>
    <string>5793afd21eba7e1844f64da9ee712d50f37c2230</string>
    <string>57c16d6fa54b6fe3c9259e654e19b51fb7310c16</string>
    <string>57ea961fe088926faef41ed7d280437ca24d2659</string>
    <string>57f606a590ad81eb68eb244f946ff931727e26c0</string>
    <string>5800e233cd416a9c55a8cfd3bcb32904005ea6bb</string>
    <string>5882661b4f05420b33e6cd5d82465cd8320e620a</string>
    <string>5887d30f74f3db1b75fdb740b13b03566fefa7eb</string>
    <string>58a2ca59dc91272d7c69add9e074819876e055b9</string>
    <string>58a3d68d995c996bb35831fdf18d7e734da02fd5</string>
    <string>58c0acaa722e472000ac300c74a40abaf3f52886</string>
    <string>58e24d1a1cbbf1c8ba2fdd4eb366f92edc87310a</string>
    <string>58f574c20bbf33da20050426c22279ee06aedca6</string>
    <string>5905098d8cc6d5e0d6b19aa5887667ee337c0e7d</string>
    <string>5907c28a8889dff7b8d53cc08be1a1dfe356f695</string>
    <string>591b6081846f75186e2bd06127e89246254ce36e</string>
    <string>593bb184c80e8e978003a737919f84886201f96a</string>
    <string>5949d522872b2f3440ae7a1694aec072d66a3b07</string>
    <string>59711538ab077ae41d1a0627f2e9175cf68043b7</string>
    <string>59975293264219e1766ae06538565190546c30d2</string>
    <string>59982bdf99d43991d1785fbfe222c418f92a63b8</string>
    <string>59ad06a64ec1ab26d1ce2e7ec6237a4ff6800859</string>
    <string>5a0bc6e1181e31346ab26277f0f2679c13414d1c</string>
    <string>5a791a646c0d783ff9e43ec3b060bfd77b8243ca</string>
    <string>5aaf4c526677a310647b1ab748c72c3819a2d100</string>
    <string>5b27f43549fc459d649c1ec7ab7bb5ccdde6a2f3</string>
    <string>5b3aadd19a45a649feb01c546000aa9755e89c4e</string>
    <string>5be371037cfbc5f19cdcd172e9406f8cde67e685</string>
    <string>5be3b570e80f75f9486ff2f44ed8af718263c8e1</string>
    <string>5c2bbc860a195864265e36756d3daf42cb637ba1</string>
    <string>5c2ed302470715d25c1b0025bc8fc4b76bc64ca3</string>
    <string>5c6d202c0df0fc85a5d79d502b1090a688b47b3f</string>
    <string>5c7ccb7cca1c157e589f54be7250451bd66dd2dc</string>
    <string>5c96bd975e7a352ee3004a9c80278be60575b51d</string>
    <string>5c9ab60557111b430a616795c6657194426df23d</string>
    <string>5ca5a54778ae83a5037c872b9fb691b2a6698e71</string>
    <string>5cb1fbbde15fe55f0bfac66ddde9650a741a0f30</string>
    <string>5ccae176521c39b7925d5db871146b3d2da73613</string>
    <string>5cf0f73dc95f7449675ddff4575e7195bea6c7d2</string>
    <string>5cfc6bb1f4efd68b08991171ffdc0fb0062bc3ac</string>
    <string>5d1a8f3f2b051961aac55188c54defcd3f545bb9</string>
    <string>5d3a68fb7e10dd58a699d24901195c7c0c36bd23</string>
    <string>5d3d5bd39faa6d8ceabb12fcb20d6347d4b95731</string>
    <string>5d5fdca97b3f34aa3e4da5223ccbebc8df856a71</string>
    <string>5d925576ed62344edfb657e9bec2fd3598f2b1aa</string>
    <string>5da41a76dd12a9b30ab649a30422314ff87a0b5a</string>
    <string>5e04deec864c37363dd72202232ec9c640f57497</string>
    <string>5e26c847446cfa3923bd3d6a0a0ce130ea984f82</string>
    <string>5e2914f59f1ec26990144f776b9920a28390162f</string>
    <string>5e55506b10f3957908c8e1cc7c9b5d174b19c1be</string>
    <string>5e755af7b1b534b8b97d2a9ec384f9b0ab159958</string>
    <string>5e9ae773376329e63f32ac82cadfe599718ba055</string>
    <string>5ea803d07518f91fe1f9b532b37ffd18ef2e96d0</string>
    <string>5eee1398ae6ecaddffbe03f6de77f6bba040df29</string>
    <string>5f6caed0b282e0bbe8124545abaf1c8d5d502fa0</string>
    <string>5ff74d049d731f983dec43344d9073069d7a44d4</string>
    <string>602ba9b59b8b2c22eca875822a59c3f6f87ad95f</string>
    <string>6033cf03a34a27be084d9fc31c9e936a222e14aa</string>
    <string>60547079d9b71c40ae618d0c9b045c57a6cd8319</string>
    <string>606a6b6b9c5b1322b2bb3b660705ecf302bd7fc2</string>
    <string>608261e1432755a4307336b0189a353632d320c2</string>
    <string>60e3a9a5a2ac7d0731ab072905cb5c1d69300a6e</string>
    <string>6105f9843591f3b7a799c2cc3c4b66be7f819167</string>
    <string>61364b2c622af4bc52edf1ccbc60b928837c46b4</string>
    <string>61503c21faf3fd94d7b17d8abcdfc35170b109fc</string>
    <string>618cb769f605677d50593ba6bc81226f66dc0b29</string>
    <string>619321b15e5cfd935f19940034503a908e51edaf</string>
    <string>61b3f064a1bfeb6db131e63353636f1e27257636</string>
    <string>61f0f53a7313fe04a802941e068b8794edc16dcd</string>
    <string>622afb36311e028e6e57cb68f07e47f20d19675a</string>
    <string>623f3200cd3f9d9b4028311e3bb3dc15433d0bfa</string>
    <string>6249a1000726c68e140d26a8c8977dbf6f387a6c</string>
    <string>625afb1f03ee40271535c1ff248da112fd09176a</string>
    <string>6267528f2f096e6782748497a9026616f410562a</string>
    <string>629a0c95abc6bb49914bde05de1152f33eb8e763</string>
    <string>62b55f6daddb7010b8b5e6c1be5f89cbb7203bbe</string>
    <string>62f522cec88aa1ab0903da0d99d7066882cdef2c</string>
    <string>62f6111cc54044da2a757b032b32761b4e18d2ec</string>
    <string>635f12e49ab110dc570abc97480f205f185cf90c</string>
    <string>6378f3f522232b70a95608839c0d43f0700e49b7</string>
    <string>6386db6b453ea1257fddfeacd8cfa94f1964baaf</string>
    <string>63bb5f6bc6186aa70305867a9c2a8257b04a5a80</string>
    <string>6430b0b8aabb45bf3e8efc2344e9c6fdf8713306</string>
    <string>646a133befa71e8edf66d2769f2860ecd2ea2cfb</string>
    <string>64816ede8da003c3735c533b5d618b905675da17</string>
    <string>64c40dcf48afa31a6d4a2af29eb3addda4e06dce</string>
    <string>64e73b38f1ea868921952b3a77fdc25697279095</string>
    <string>652349a54ac2fb10f5811e50a288061c2afa1d95</string>
    <string>652ad30b5d4027b973526e4df54df40578f76681</string>
    <string>655c570bc037bdd10ef7774ded4fb6bf1b9873c5</string>
    <string>657cf8d9cc9cc11530170d7c65428e4d3c4a2b6e</string>
    <string>6580c019f157e7b32d5cb162392f08c58dc3fd8a</string>
    <string>659f0e2ff78091f42ff881f26304f5a7cdb20f43</string>
    <string>65b1a36c9b3f77f5b23645d6fd3c4bbd39a9fa3d</string>
    <string>65e00369bb0704b2c08a6464c39c7f3fff1c95cc</string>
    <string>660dcef57c2c4292fa222927ca90cb87b8fea25d</string>
    <string>660fd5e380f09c682993865924ba767f7d627180</string>
    <string>661001fc68f0af90fb3646d3e2e63e28e6479def</string>
    <string>66489e192e3dad738603428d826e897fc0939fe8</string>
    <string>66a2a3c3312616d8be1042062f48ca1847e68705</string>
    <string>66b1717d4f6ed36e25c95eb88845c9c246ef51d5</string>
    <string>66b6eabc8b525c77bf156ddee5a57b01144f8131</string>
    <string>66c494ad29430ddfe2a62e31effd6494ed76e82f</string>
    <string>66d190d32c28bd4e12cb7457b36678640a6e44e4</string>
    <string>66d1b87079024b2d9fcb0d4ab716ea691c16f506</string>
    <string>66f990e8dad35319e15549f741cf179fc4a8f891</string>
    <string>6723ea6941dccfd39e9c0c37319b8662dc43e3c7</string>
    <string>674696158370c723dfa68c67df1792547c9ae32e</string>
    <string>6759878a0eef220d51303175e6ed6cfd486b62ec</string>
    <string>67c7bdbc66bd45823b00b622f3175fe84d6b5a19</string>
    <string>68056059b004068d6b0dba8d8fda7cbc67db933a</string>
    <string>680e790ba9ef677ffef371b6210ccef8467cda44</string>
    <string>6817bc546aa2b6c09fdedf8b6d098e5c30079dcc</string>
    <string>681a82de8924302f960719f7dc6fa5314463b27b</string>
    <string>683458fc90fd3de9dde6cba3f2995f43daf78b52</string>
    <string>68500bfd3e621d8857302c18d49b367e98407c7d</string>
    <string>688c5128c24ca25711f1cc97c73a19ca265d2a39</string>
    <string>68a4d695bb77a2c47dbd199292be9d3718a3d232</string>
    <string>68aa8ec28a188928c0e2adadb936649912b784f3</string>
    <string>68b2522924ca0759af236547ce69149dbc51dfdf</string>
    <string>68bb2eb191f179d74ecb696e2baad52f0172681a</string>
    <string>68c295e9cf91a33cbf8c014c0604dd0a210ce8d3</string>
    <string>68daaf66dd998b52aaf48fd95cc3c517845b4373</string>
    <string>68f2f445a8d70e358692af87db65d1badaa54848</string>
    <string>68f429987386088e37e212cd129f60214297b823</string>
    <string>690dfc4e27be27c48256679b4939265cfec3261b</string>
    <string>6911b42cb7377519fc8e0da84b80f38e5f738ae7</string>
    <string>6952d94ccbe359112d0bf22171eea01d43f38d63</string>
    <string>696b97039b536166107be90c301824a941c34926</string>
    <string>69cae1eeedb4476b8d0d002ecea397d1f4f0abf1</string>
    <string>69d213a5abf5223a498464863e96e0d33a804d0d</string>
    <string>6a303a7f4412b07e7e229b4eaaa22c9fe35d671a</string>
    <string>6a98dfb01e30f24b19267a5996022df5631025a5</string>
    <string>6ac10222da92423aa6e777863d60d4532b60e177</string>
    <string>6ad6aef1fb172a49454499ff014296f07d4a11c3</string>
    <string>6ad8ed760f536be8449fc541f60ac0e48dc60860</string>
    <string>6b17e687eeaf3cb7ad59280173a0860bcd69d95e</string>
    <string>6b1ecd65c9edbabc8e8a3b74900d3f9dc82d146b</string>
    <string>6b3a26b32e42e7d927ea077a9e673d18eeb5f8a3</string>
    <string>6b990db2ec5dcee35348c0e0b715976980b4475e</string>
    <string>6bbc834bb0bc81be80c88eee5a1c54bec6b05619</string>
    <string>6bd10528a595771721a5c7b421387965a460a3b4</string>
    <string>6bf808508623301c1280f7fd48526e1380a67388</string>
    <string>6c3e1c512170b04c639142e9586919fcf6a8006f</string>
    <string>6cc42ad5f62aa304471400d09d4c3561858b7aad</string>
    <string>6d0e8f2e2af20fe17cb1b9228d26b366a4b0336e</string>
    <string>6d1dd27fff54ae9c27818520a7d2236f0b93fcd9</string>
    <string>6d4487e35e388f8f5ddcd073c3565e00770d9994</string>
    <string>6d69a1d9ad45f3daeee123e0270d73d1f5a2c3bc</string>
    <string>6d72f672e424527650f52b109cf8e03ef33696f9</string>
    <string>6d90c0306321aa286c7ef22daba80e03e03fb863</string>
    <string>6d9dcc5272f96c770a3073aa9271a067d94f5b6a</string>
    <string>6dc8e69509e9eaae17855d60b65012d3d5bf2edc</string>
    <string>6dfefc074b9fe01d3c5220ce6880e5ebcba9d8e5</string>
    <string>6e53da7439ae12ba4ea3a0a4d63c5db42ee1c040</string>
    <string>6e9e71863a5bba232148227c3b2734ee7cf7aad5</string>
    <string>6eeb6c82f10875617bfa6efa7be9e70b245d816c</string>
    <string>6f30ba8034c8525d104f2e35bd3fbda0391eb3c8</string>
    <string>6f31732ebc721c5a4bfc3e88fdc179756c673c68</string>
    <string>6f411d3bb98419e5e3144a9ec9cb77cc57cee961</string>
    <string>6f619c913ab59f69bc5fd83d899ac1d0dd25637d</string>
    <string>6fb0ecb63506f134153decc40deda46bf7b37d5c</string>
    <string>6fce32e38619f1e299331e8984ae60e80d4b2ecd</string>
    <string>7002acd0f9299b64b8ba97e512444f153b0dfc12</string>
    <string>700ba81cede3f7dd51474d744854b349b8fb3659</string>
    <string>70b15ae645b0050321723baab1e25f99bab3ec55</string>
    <string>70b9accf1a19dd62b79e6428efa2ca7507ddc97c</string>
    <string>70c27b56ddfd3bae8b14f0f7a080146db5a187c9</string>
    <string>71001203027362adc7fcb89eb7332832a67d3ac1</string>
    <string>72154445bc789460ef685c911a3c85964c5f71df</string>
    <string>722de60228fc696ba040c8aaef6f82b8f9320291</string>
    <string>72315cedae528f827c649d6337adbff643e2eeec</string>
    <string>7231de5972a67078a48ce9346dc14ea0171b00fb</string>
    <string>723dc4d61e6245dd650d529e14ee6e0bdfdd2c00</string>
    <string>7261f26dfe2e8d13b390b39ed9a1efc561617f3e</string>
    <string>72cf787c04a8a6b066ddfd9388fd731663c7546e</string>
    <string>72fef79f703b585108000d2bfd2f2fc04fb3a4ca</string>
    <string>730ce06970b78f710801e21175fc92d50ba2bb50</string>
    <string>73404517de748a1c7cf1080e9199decfcf1a5038</string>
    <string>736228cf9f5f50ceb0f665187ab1ae143a0800d7</string>
    <string>7366b6e5f43e36a35e383e69798da252b326ff46</string>
    <string>7379231dfb9302aa9920aa2bfb6cd4064b119100</string>
    <string>73955276ae0ed107f876daa07775b7485b6579a4</string>
    <string>73cd6e55704dd2392dd80637c6f828ea4c516b13</string>
    <string>73f7fc4b2e8b7e874d28a95041dd6f79f02a0abd</string>
    <string>7411376e795e517840f996cc2737655aa6c9c7b9</string>
    <string>74145a108329ab172223531ae63c3bd2290624e5</string>
    <string>7428b7911ccbeee54ef67ad3aa22fddf5f34ee18</string>
    <string>7455bceb26946765146240b3ae2db8987c05abca</string>
    <string>7467b6116ba6d58bac4aba867101e39641a2eb72</string>
    <string>7471d58900c01f33a7f315f8e7cab82b5fae25ec</string>
    <string>747cffb8c9c1971e1f3c57345e1d72510258805d</string>
    <string>748c30002735e7a91444925ac6e0c46bc234bbdf</string>
    <string>7493b4f9b02c7ed6959c999037803214f08fd93d</string>
    <string>74f32056cc2260802f701a231d681196e2f982d7</string>
    <string>754b499d6443c496386f6ba4b62e1f99751064eb</string>
    <string>757ca1977f2a7f4b6dbb4ff078d61b8c211264cb</string>
    <string>75e42b0b87316f3fa9845f739afeb925462ab076</string>
    <string>762160eb2611815cef4a628bb4e14bff307a3a99</string>
    <string>7648366facff1b53a8830b6708f8c0014cb49328</string>
    <string>765e8d736af9aca606e64a9b0f6a47a43fdc3512</string>
    <string>76b39be2716c41de686462b870adabd87c7099d1</string>
    <string>76ba89aa04502f29cce493ab0c579f13ba9aa3f4</string>
    <string>76cd5e735031828c3034593123d7ef81e8b9ec4d</string>
    <string>76e3be7c4047bc8b84fd9ef04666d011946fb0c0</string>
    <string>77347d81ca0c5a8acb9ebccefa6f69ee3afbb7c4</string>
    <string>778f840c0875be12c7fb7cc50dbbfdc77984d249</string>
    <string>779011ace23d91f9047aaec4fdb5a7807fb71e2a</string>
    <string>779c42a0123d95ce299d0b2512a6e8fe1459b31d</string>
    <string>77ef6735ff2725fc8cdd653c9b0001d0139f0f03</string>
    <string>77fcf87eedaea3b413bfee7e93f96424e2ece3d0</string>
    <string>7826a9a84d384e151ba86074f2ebac5fac93879d</string>
    <string>78704d4e6d717989891b7d0d866bcb35fc4450b5</string>
    <string>7878f455eff9dbbd1b290e14fac65663ea00744d</string>
    <string>788b89369bd64705553e0b0582fac802779947e2</string>
    <string>78bfb544531578222aba67d39ca0ac37dad61dea</string>
    <string>78db9e91cba78210a0e4a7953760bbb573c7262b</string>
    <string>78ed39e7237c345e0c4578cccba1f05fc2ce53fe</string>
    <string>78f26c59365c3961955b2c1cfd9fd1b0409be7a6</string>
    <string>78f47a748cc0515f1d6d3dd1d372128752bc86ff</string>
    <string>78f73c28344e907536c8b68266a8b5d3806305f1</string>
    <string>7924bbabaeb35a15870d20314e955508edfea38c</string>
    <string>7951e9e9d27bf53d4f7d4de55f72d8c585851389</string>
    <string>7960f680e3408d166830fce3b4474037c9706e18</string>
    <string>79662a468e2c9f4a2d0e7a9df751fff08b46570c</string>
    <string>798c480c5a43702e6b35d674a193699b63f1a904</string>
    <string>79a8ebe6bcc06f532c6287104b5f2fba7891383a</string>
    <string>79e1008b8a2d2ef3c2ed91b6870b53b09bdeeae7</string>
    <string>7a33240f61f044c5dcc236eb0bde1f7e015a1c7b</string>
    <string>7a3629c373186a5f6a235460f6b85dfeaaa0d0cf</string>
    <string>7a382aff71cff3d1b07efd2008841d8b9a3c5dee</string>
    <string>7a6d0fef9c5a6155de76ffef2ef8ec5f704019c8</string>
    <string>7ae5676bd50b8cb7c2bd7beec95e9dba730bd218</string>
    <string>7af28b8bd6c8325e9122484950a7fb20b6f2f7f1</string>
    <string>7b088da2f749a6769918b1fe779c35499e5af797</string>
    <string>7b84a672e30335d06e4c96f4d849bcb0dcd880c4</string>
    <string>7bc2bbb0acef696d3d111f61d1d5e79dee3b160c</string>
    <string>7c7b1ff01e4f30a321918734b7e0a1dc7989bc07</string>
    <string>7c7d971f4c5d3c3766485fd0c6effa0782b98717</string>
    <string>7c7fe0d91c7c42cd9853badc7218210c85632511</string>
    <string>7c9ca0972d2e8b275c82f8fcd61a02b16007465d</string>
    <string>7cb715d369114740e9fccad297717c895b5b1fa7</string>
    <string>7d6109b4b70fcca8a03beee882c74bc961b56792</string>
    <string>7d8f8f66f431675357296305df81214b0c54915a</string>
    <string>7dbc0e6a9f6d3b86852f5b0b70f06e73293c0f43</string>
    <string>7dcd64efa4ad7d8806af7d536e00ccef157c2340</string>
    <string>7def471ed8d3f02a68ca33421d076268d24cf9af</string>
    <string>7e1fefb7193c52cd1bda8b9fee8aa97b5f2dfe44</string>
    <string>7e2a2d283f4b6b512860a119609ef5fd770a61c7</string>
    <string>7eee1ed57d31dbc62ffcd84d3c3887bcff4fdf7c</string>
    <string>7f00a70a77d418c354e899b53057fcd9f75d9ee2</string>
    <string>7f271b33a3872bcc26676310418a60a94ad936a3</string>
    <string>7f2e1f507328edeae7fcbdae667df09da49650f8</string>
    <string>7f31fa07e16bfbd1dbc273d7b1a248680e91a46e</string>
    <string>7f5cce4cf8e6d436e0d5861fdc6d4493afbe0592</string>
    <string>7f7d3189c59ec19fa1857f65ea145f3b219ea949</string>
    <string>7f8135c551832e0d9c5db05f693814b9a6a0d034</string>
    <string>7f81c09d153fee9756ea09c430695e46112bff47</string>
    <string>7f8a20a9296152129f432328bd242c231631d24c</string>
    <string>7f9d440b954f0e92b98a3a6e194187e9b8ca5dc8</string>
    <string>7fa798363667264e927573314c7ab2ad2965b1e1</string>
    <string>7fbad3770244987c6872a954f61de0baa3e5b879</string>
    <string>7fc570d82e54b8abadf1614cfcec2cc536229b2c</string>
    <string>7fcec6e50754ca92f1c4001bfe79c8938c8ab242</string>
    <string>80b02d22fde38a3aed56a1524e12a7741bc308ad</string>
    <string>80de794f7d90e6f5604bcf1f1d1e13cdf960520f</string>
    <string>80e35b981381645839fc0c40d419a145db6e7fd4</string>
    <string>80ffb75368191ce91d3340dd32f5c19437ad32d2</string>
    <string>8139d5c07008d93f63a3c106c70b80808a3fd92a</string>
    <string>8144d73552f45522a3dfc01d25d5ed3a02cf1d6b</string>
    <string>81a6e7d05e2267b6e5deb6725a7ba6a014486ae7</string>
    <string>81d55aa276e31820dfb5604d46d779ed78e953f4</string>
    <string>81ea93d3e0ac68c02dee5a6067fcd9ecb406f125</string>
    <string>8201e34ff54e699fe987b6305f414f4961f421b0</string>
    <string>8204b4f813fef566820546ff43f43940d5cbd2f0</string>
    <string>825ad3c9d062b226ed27436b5dc6e35bc8666b16</string>
    <string>82d0c04930cc71fadea9e300a5021e9485c12b72</string>
    <string>834164c84f4e0a06755a25a3f96c20358382c31e</string>
    <string>834824bceb1af113767fc5d980a628b010925292</string>
    <string>83648135dd68038ae7923ac8cd9887e9bdcee761</string>
    <string>838b71c0bc4702b38f9009035b1b8d740c9387b7</string>
    <string>83bd1dcfd11661a3c428aecbf7315a7c09663037</string>
    <string>8403f39fd6acbf2e45accd7360882d6f931ea531</string>
    <string>844abc3a0a334cf2f806f951dcb5812b16b9f5ae</string>
    <string>8476893f6e94cb16bec4bacdea51a82d39aa40d3</string>
    <string>856b27c3994ad698058954569446e09c69be5987</string>
    <string>85df4bf2bfbf723d1accd0e655c018a05b337e52</string>
    <string>860460859f5030ae2e3fc05fdb66668355bc3f3a</string>
    <string>8613e56d813adaa8abf31478aaf4ab87a93605cf</string>
    <string>868b685bda4b065a4d16ac0e81e916d8f4b9700c</string>
    <string>86985566fa0c9662933fc96f38d202d1e2798aa0</string>
    <string>86f5d3b03c2f459882f463bcb35896f025cd9b25</string>
    <string>87048a188d42d11740e839b6a3df8a5cd02b3689</string>
    <string>870c2c767c79faf08f6f071564f3209db519f4ad</string>
    <string>8712fa64476b474cb4eb9f0a811fb9c64a89d1c9</string>
    <string>874c3c00f53c56a98c47b06b071c77ba81311977</string>
    <string>875576e064996d72a8e12347635df38bd17a8908</string>
    <string>87b0ef0f23d2ef273ee6b81691b1b3f914744c69</string>
    <string>87b4befce8b5e0851585dd60909acf162db7b5ab</string>
    <string>87dc16c6872e2afbb4a7eb8bf4db69dbc1935ae3</string>
    <string>87f75b5f8311c0ffdc896b8b375b0aafb5245e4e</string>
    <string>87faba6d57c72705185730406f2c0e651310f159</string>
    <string>883e2f038c74e44f1f852275d96397309976e284</string>
    <string>8894db6eac743c98940a3b369e098ddfb2bae45e</string>
    <string>88c4db9f626e73161fddaa410ebf0dd3939be456</string>
    <string>88e1bb81607d4725cf2188b69171760fee2aeaed</string>
    <string>88fd4de291064e56fca9c20ecc47ef4c1f405331</string>
    <string>893088f4e5e1147c881dffd15d3d5d792cab740b</string>
    <string>894a89920c31432001f139be03625d5b789673c4</string>
    <string>894bea74eb79104a3bcf6de005e10df0258e4e68</string>
    <string>895e90c3a062442d7ec2d06c68ba62f3cc4369e4</string>
    <string>8992dc4dbc3f287f8421cc71bbe2a9411dab625a</string>
    <string>89e85a748aea49d2dec618d2cc03c0b6a6a48e29</string>
    <string>89f714953848be450c695f4d3de81399ebb94b47</string>
    <string>89f7c1c90102fea9aa8f8ee13782fda3e2bbe2c2</string>
    <string>8a06dae12e7b74332e88d139ea8c243728260140</string>
    <string>8a42d156f65ad61145960dff00873a7809464f3e</string>
    <string>8a43f1891d73985fbb1f4e14fe7e8e6f073647df</string>
    <string>8aa72ae234b01eff9e997abe892f4ebd1608d7ff</string>
    <string>8ab69f10590c228a90a41a7632afa33fde98be10</string>
    <string>8acdb63dae2a7b44a39017ca7f951b34db581941</string>
    <string>8b15c1104b031966a4fd32ee79ca1298805107d7</string>
    <string>8b49dcac7dd98d6d182a08c26b55957352f23a52</string>
    <string>8b64a65c84a0444f340fcbde7b0632a9f591b1c5</string>
    <string>8b776e19f657a8362ea0ba5258ce9563544c0e59</string>
    <string>8b7eb1df8adea21e39b0d8ddcacaa678f309771a</string>
    <string>8c046725d6bb80aa40f1a8268cf3da9ec4ef4f24</string>
    <string>8c1d2f8a62def1ab4c9aae1eb2ed22cfcc22b872</string>
    <string>8c2d90a00ce7409a8c65f706db03e168ddb45311</string>
    <string>8c36249c3e6a9b8fc99b4e622c9ebc444d0ac539</string>
    <string>8c6ef7cfe73e100e71f507bf92eb1fdb61ac77fe</string>
    <string>8c920999a56d95b45f39e416cff3866c29025378</string>
    <string>8cbfd1babc670f8301d4a0a99da0b753d787e4ad</string>
    <string>8cd5c431ce67fbc43c96f199df24c44bee475e70</string>
    <string>8d325048e72f6aba1e726b4f5038a01ef5928eb1</string>
    <string>8db361a334c69dec79778f98ea5e09255bc2a5aa</string>
    <string>8dfc7ad6f48ea987e2bdb60bb058b59cf8a7d47b</string>
    <string>8e0b68e3bfd31ba43b836b96ab6f2a0647ebf9cf</string>
    <string>8e3248d15b13ace760895e5900c7d158e37f4a89</string>
    <string>8e35b94dda6299678aa0a22b957623210683e35e</string>
    <string>8e60ddfb4ad0aabcacbab7081bc0ab51a9daa8ee</string>
    <string>8e7e07d6bcc8eedd20bbca774175b2c46bb77d38</string>
    <string>8ea985ceadc97a2a9067e3008b4ba4d0f41a49d8</string>
    <string>8ed6848f0ecfa2ad20ff9454ee6f6a54f457f90a</string>
    <string>8f16bdd51938f3d73e13bfabe38bb398391fee07</string>
    <string>8f3735738a070dce7043e9708324cb5e46d68386</string>
    <string>8f656cf9831890df4f557cc4cf1533d60850a0df</string>
    <string>8f8ec80ff8957c2cb4adcd80eae2b13e0ae6fce7</string>
    <string>8f99870b319beaa19cb6c942ac41fd1471d0ee51</string>
    <string>8fa1d7754f824cae0aa2a8cdb3459fd22b1eb6af</string>
    <string>8fa87f9ec2c334e45d05c76e2bf09d4cb0625cad</string>
    <string>8fbff4b3e2e815dd07f59090d98b8715e8c5503d</string>
    <string>8ff1d15a99461c927849ab697736abf9f2ac5b8f</string>
    <string>901385ca0f4274d6a71ab42943df8add6dfc5687</string>
    <string>9042abef8dd9783d9802e6651b72f1d9281e9164</string>
    <string>904973b4acc53230912c325512476c542d1e548c</string>
    <string>9054967f4931be7eee1e9544baf5f0b18b4dbdaa</string>
    <string>905e1e56a47efd9d0dae50183f7cf4567e712381</string>
    <string>90786f1755cef78972e5cb5fb0dedbee1d9390d4</string>
    <string>90e362f0f834698e2ff1ee77a7db22a9592603f3</string>
    <string>90e9045e63dc21f740f7a5c5307d2249b31b5d47</string>
    <string>90f9e889b7fcbf7cf9f3efda32454c0506e9a834</string>
    <string>911383fa624d65665844ca6fe2af11c7d89d9269</string>
    <string>912ed912774ca38b19e38ea62466e52b692e73f1</string>
    <string>914880149f14c9b5778fe4a779ecad4c87917482</string>
    <string>914a942ea2f4a973be76f0b50afdde4725ced978</string>
    <string>91ab678d8c34170abef95be553c67b71febf59c3</string>
    <string>91cb7d80b1e24736666831eedfeaedd0fced30a5</string>
    <string>91ed41febfe9450a8380ff0d43fd8de04f76c460</string>
    <string>92019e4a012ea939016a33fea8a9a8b80520232c</string>
    <string>920b4b91c67208e5de1b708a1c996f1efbe57d42</string>
    <string>920cf70d0f21c6dadadb881b31440c380452338b</string>
    <string>92192f2b4922895e1fb87136f7f34112d242897a</string>
    <string>923802811f13357fcea6fe17a9358cb8395a6c48</string>
    <string>9247495cc96ed2d17d30b9199d385912ace5ebfe</string>
    <string>928a8ecde46a3ed7720e6b45a81a3fea845526cc</string>
    <string>92a556a6c0b500ecfc7fbf7e3376378b90f2fe14</string>
    <string>92c755dc9831aabf3a7136860e9956da232d6da0</string>
    <string>9308e9c2ff77f5cbc5de4cce4228195ae61d1d5e</string>
    <string>9313d300b70013ef0546d98c89132f909ae1f977</string>
    <string>9370a1362e5c2d962819af91a3613e1ccaaf1a55</string>
    <string>93715ab81e7b9344dc9eb263c04dbcd98208dd5c</string>
    <string>937ec5ae5513265c20a97e37191345d8be3fba48</string>
    <string>937fe0d2179501a1e8a3e234fc167110ded0d7f6</string>
    <string>93f1ac53c4622a5095b484b4cc43142865569db9</string>
    <string>94048acbfcd77b100cbe1e9a74f11a1523289b2e</string>
    <string>9417d350bfa3ed7006696009033781e1b73a9747</string>
    <string>94326ab1ff84b991a3d438ece40d30f5a1d16474</string>
    <string>945a616666468cfda4b159bfaacf0e91a7d857a2</string>
    <string>95a46db779311395246369fe40619a1eeebeaf96</string>
    <string>964913206025aa11a06b41cf4c3509f45834ec5c</string>
    <string>9668206ee12f46b61d77e666d1ceb12105fc3acc</string>
    <string>96c350da157851dcb492ae2e097f289274a6dd16</string>
    <string>971acca0e7ec0089e2903b261d576e11eb57c18a</string>
    <string>9733648fe5e3f2d67be9ed7b7832323e90621d12</string>
    <string>97a9b6996ba016fb74e7a3704b68b84c00ee255d</string>
    <string>97c7f020a1e4ad5a7bddde7717cdf3144876331f</string>
    <string>97ca28b93d7596f038e6ab955a60f2524fac4a83</string>
    <string>97dc2f22cdcd85d179ee1ba57280d3e770d428b8</string>
    <string>97e595775625c8a4ae944c9fc855dcebbe327b3b</string>
    <string>9804ef01079d91c4fe7690180541005085ca468d</string>
    <string>981d34473bf8226d2ebf51a6f567a81e7e8c788e</string>
    <string>9821cef712e28f3f651ae3df9eaeee2076deff68</string>
    <string>9846b6f52b68a98a65c288aa026dbdfe385b2f11</string>
    <string>9863ee1d07a724c36c8f6aff2491a14db5e9e9ba</string>
    <string>986cf1dbe8240824845ea5c36d86c723c497dd74</string>
    <string>986ed9383673308195af233f4bcf3d14cbbdbb27</string>
    <string>988d60e9724022c9062c7ffa9230067a3e173d36</string>
    <string>989ed2d1b0a1ba87809056ac7c93f8397f294759</string>
    <string>98a98b8c6b0688ea8b196591a4b8efb8efea54bb</string>
    <string>997b998e4227598357928d9d1eab9a6a5643743b</string>
    <string>9986edc74d0d169591a006896d9b16399e690fe8</string>
    <string>99a63791db37ee0d2f51fca2b0dae10c67d3388d</string>
    <string>99a91ec00f75722672f5472dc70af3ead24f37c7</string>
    <string>99aba0ada49be84083acb90e7fe37ba078c4aa2d</string>
    <string>99af75ba70d07f4a9fac6b9c56e724968b3fa4a3</string>
    <string>99efcf74f5d228982a40f33f3322e17e927a9b16</string>
    <string>9a13a501fa6fd6f9cc0d236bb79e442a979bc9c5</string>
    <string>9a9c3c58abd2abdb3b9c268ac5acdf6c648c54b3</string>
    <string>9aae4f38abb8bcfa2026a5d9fd60461e929c472c</string>
    <string>9b0272fa153075bb54620814058869215f92addd</string>
    <string>9b0440e0e0a389553f7cc84e13df7bc2754e668f</string>
    <string>9b3ffb10c6a9c7bfbff5c4dc5522c3ce99947945</string>
    <string>9b414fe6e816f5dfc19f782a542ae4864d64ae7a</string>
    <string>9b8e04447e875419570949c5e17963942d77d99b</string>
    <string>9bb4ed6882480dce6ec70a9acd8bb0c63d990abe</string>
    <string>9bb675000077a4f03755a409145ba616c34dbd67</string>
    <string>9bf2da19ff8ddf026d9115a93de9b305e8150020</string>
    <string>9bfa0bee931224f66ef361b1dfd00a623d6540c1</string>
    <string>9c297f7fbdbda0190299ecaee2c8d560d839df69</string>
    <string>9c304fac3650c17e53f423e78425cecf1712da93</string>
    <string>9c70564437580fd7b312158ef4c0bd178907b983</string>
    <string>9c922e7336fc75e8c64df988ad87490105eff428</string>
    <string>9d41bad0a98f20ba476de5ce64f704709edd06fd</string>
    <string>9d7e78dd65ee2847cbaec8f35d6379ab3ff02017</string>
    <string>9d8ac0c57fa995ca7a9d651273fc4af0a3759024</string>
    <string>9d9e91949ec9ba421ed1ad80fdb3c2c279134d58</string>
    <string>9ddb6795c105a578f19641131e42260de24ffc5b</string>
    <string>9de7f9f35592e39590cbcdf296018f396d7f0d9a</string>
    <string>9e32ab0bcd468464a947769ed9aca330cb5d8567</string>
    <string>9e35abb94f043d8b5fdae2841965e94e21a6239c</string>
    <string>9e41fe79e7a510939db0ab8ca526e6656243dd29</string>
    <string>9e462c07d74978dfbadc960083792002d621635b</string>
    <string>9e7a2cac14b2ca03e1a3d85ef318175789743563</string>
    <string>9e8085aff48a468aad295f8fb5ef44153f3ea9f3</string>
    <string>9eaf2fea87426e994fef3b3ffb5c8d35c699391d</string>
    <string>9ece2426eef56004b90d09f4cb8ee41a66836594</string>
    <string>9ed4a5599bb8a1924e4f4b0ebf0bb1775ff8f165</string>
    <string>9f2407c87726522c36d26a7c96bf47daf661bea7</string>
    <string>9f2e1d848f0b7fccacc0ad84682f91588150a100</string>
    <string>9f4c10a72339c8e2b688b8c2ecca0520e3985c50</string>
    <string>9f57555e92c9504685a30fff5cf2fa11ec30aa78</string>
    <string>9f739d76fdce2fb83afb89451a605627193ef6f0</string>
    <string>9f7961683ad4c77ab9dda3bc13023a77c0453e52</string>
    <string>9fe749d299281b5a50ec50f03d3d358c17db62b1</string>
    <string>9ff7433205e39a195262a028de1af6adf418d036</string>
    <string>a00402f7fce51499bd7dd1f16d9cb2d7e338966e</string>
    <string>a02c0d81c1b64935a38172a7ead053741b62cea9</string>
    <string>a07104519c5024e30aa8e2e56b3957850d4ed9fa</string>
    <string>a0bf2875986f89c3a7723aa25d5425b4af903134</string>
    <string>a0db1b273b458d97dc3fe667f62d079276f7884c</string>
    <string>a0e41b956766f5338688b7e7f33e4d67c9853914</string>
    <string>a106b6133fc0cafdcd30f3d5c52b83aaddfc3ae1</string>
    <string>a14c0b3e3289aa573dad6b3a11a0ef8e5a419c74</string>
    <string>a15c80d5cef15df38663b1d9fd81367b32ad569a</string>
    <string>a15d8564de1298bbf3b49030b02575d61e487f35</string>
    <string>a16c07ade1066bcd00965cd6fc55fdca89b0f9eb</string>
    <string>a1872075b9c39b6db9a419b9f258f7b1b5f7feed</string>
    <string>a192bbf7dc6f71bcd2559168fd7ab2f506bb617b</string>
    <string>a19388710d106698000afe0e5a80eb2392ff6950</string>
    <string>a198b64dcf967bbeec8c38d25b3f6b9b5089fdb9</string>
    <string>a1dc0952c5fc6e7cb917478b4e3230481b938348</string>
    <string>a1ea93fcea7555654960abc30a9211dea8516e51</string>
    <string>a2148484286fde783893c58db9be5f3f7077a864</string>
    <string>a27156fdf0137ba9446a813a4ef148035e3da204</string>
    <string>a2868473719c2cf920141d621c597175c7cfb492</string>
    <string>a2bc5a4a1831f432b4852f0a3cce6ec1cc1a94d7</string>
    <string>a30545335954c0cb5234374235979dd850dd8dc9</string>
    <string>a349da9e751042e5d6dfe986a9f5f950da893928</string>
    <string>a34d827d5bbb9eb40693c1617c509f7756c14838</string>
    <string>a39fb1f2dadc09ab52f7ffefbcec4e93ef48f787</string>
    <string>a3b3fed6243a18e98eb591fc8f2e2880710d1887</string>
    <string>a3d67261428cd265edf380e6d0de769482d07017</string>
    <string>a426eb16d7ed77612dcf32b94e52ef597a8a5f1d</string>
    <string>a42f93b566964cbc3c24494eb12a74845768212f</string>
    <string>a43f0ac77408d9a689dbfef2df020b9ecd92975d</string>
    <string>a493f91a603133a3c38feac27c8b20555c4ef9a7</string>
    <string>a520b93105430971a2949357b9325c025ea7e888</string>
    <string>a5219ff49f74693fb01dabcbdcfcb37fdd95eeb7</string>
    <string>a557a3920bdb88ca9f9efd8677628bdbc7bf152b</string>
    <string>a5809309f870a05a66b4048284515349defca4a4</string>
    <string>a5b1d6869a70c17e1a117802942220918e3a1841</string>
    <string>a6166352150bf71008748749f7bf6cf77ed71c8c</string>
    <string>a619dc20bca3f0b7af2e084a8d5930b944ec7c92</string>
    <string>a677cb215f0b82537ab67738331c896858896f32</string>
    <string>a67c46bb70e7fdc4fa715c61ed6727d7c95dabe3</string>
    <string>a67c66c465e4d8aa3a5e0151764a808013f9f898</string>
    <string>a6ae2de7f72e64be0d684fc2cb8f159dfcef6985</string>
    <string>a6c02035168f57ac163eed2ef1a0619f492e031a</string>
    <string>a6c58ec427539eee6eb997591ed20e8dd82e4c06</string>
    <string>a6e45a293f4210cd9753ad3edbf54e0bf770e9d7</string>
    <string>a707fe8294f434512f2924694142ed1d63821611</string>
    <string>a711cf82af58c444c565364fe532b91e5e8060af</string>
    <string>a74445ff56237c80e65dd7addf207cab95615530</string>
    <string>a7838d15f135168037dd7b399ab9b212d6613a87</string>
    <string>a79d7fbe5436874fbd5eff763ddc8a2b17b2b82c</string>
    <string>a7c19cc3aa6cc4a21a223c131f9a90b873f495ae</string>
    <string>a80dcaaa818932db1227d79497fb5ffbd559586d</string>
    <string>a819a673653206719b498c7c43dd8c68a6224858</string>
    <string>a81e56f5954a24be91a86df96fd2b76ffafbf8d6</string>
    <string>a829661ceff168d045088c55f157c90223317423</string>
    <string>a883180289309f39680100aab022519a6dd3eabd</string>
    <string>a8847df2a32599b30a08cf6fe4ad8d63ebe3414d</string>
    <string>a8d8434f75fb2eef19f6f549815192a810bf0657</string>
    <string>a91a104c1f147a6848cda55b38275e9442ded377</string>
    <string>a93bb91973f572476c9a384e4fba0e0c9c99fb1f</string>
    <string>a9498aa33e3a77d7a5bb216dcc9ae443d324e8de</string>
    <string>a94d71c4ed0fdfb0a69f883d5d3e1f751302a41e</string>
    <string>a970f07d866795330b4b4b7b91ffd4bdb58262c7</string>
    <string>a98853175c62c44d5183f5b519fa276e43c72d82</string>
    <string>aa13de95e5f3d9530b4b425e45e5152fee3ff11f</string>
    <string>aa453f13b03547c3e5d3438c364343989a7b9667</string>
    <string>aa63c5874bf0edd8c9003549008f2b8b64979461</string>
    <string>aa738baf78f95f0b01b2182c58fc63da9055ca98</string>
    <string>aa9504c8c89131a3d74e6bdff8d864c4144a42c7</string>
    <string>aad287988d3da1cb95bcd6e775535bd9150a0b58</string>
    <string>aad7ea2c4526f9d12d299d2b1032f04597c12862</string>
    <string>ab5301f0efea696c31424cc8c8a72a80a048be12</string>
    <string>ab53b43ea515d5b2469768a57e601f62ea443034</string>
    <string>ab6e8bcec530dad3db71c3ab54f0901843ee5f62</string>
    <string>ab8f9565b5ea0cb3d04dcf948a866f7a91ade5a6</string>
    <string>aba40cf3f6a6f777875df2b5e8f720ba327d43af</string>
    <string>abaf079fb298b5994160f277ff383587b4a6bf78</string>
    <string>abb8deb7461876c1082bdabb0aa039cb625bec20</string>
    <string>ac1e2b28df850ff33b3af9d7fc578b77430fc7a4</string>
    <string>ac1ef9fab885992691c5cf2bed2f19f50b772d8f</string>
    <string>ac2a4c2eb7148b94e73a536f3fef9e2ae17ce963</string>
    <string>ac889fb46e4c2dedef1549573d360b6e9fb2e721</string>
    <string>aca3799c63fda00bec608fb1a7d9ce9b0c905458</string>
    <string>aca87146fea94c307ea2acbadb4eba41c2499287</string>
    <string>aca93b88e88f152b19551a0a8a706517b59a43e2</string>
    <string>acaa690c3ab60b402cef087243c619f468007e07</string>
    <string>acab039ebc954153168acd0589ac984c2f844811</string>
    <string>acb2678560e88b1ac30367cbb49679fb0bbfd653</string>
    <string>acb58b329963843926550edfa857d36a847bf19e</string>
    <string>acfed22c024089dbc257d51c16f23cff785b117d</string>
    <string>ad65f2776331cc1ca2da30fd4ffc652d21a34f53</string>
    <string>ad6dfbd3a3407d14f210f6168211a989fbb87aa9</string>
    <string>adf5a2b53f5f44f52ad7852a5e192bb7860ef6c2</string>
    <string>ae012b2f77c2ed14f2addc8e3b099d13fe4eaca2</string>
    <string>ae1853d647948f368f346bdec5a9c17b43c63512</string>
    <string>ae21ef28c7ab3e1706234758f98cc68daf31c406</string>
    <string>ae5fcb68cddd47e6c51492b121dcebce5b7f49c3</string>
    <string>ae66eb7e1bbe783c70c3dc12129a1c32170f6638</string>
    <string>ae767629c77dfb3309a8942bce2e2e01bd507642</string>
    <string>ae774900b7155c9d4d438764fe6fefe2e3dd9200</string>
    <string>ae84a84d1944ce0c3feb4122f3037933da3d92cc</string>
    <string>aedaf5c13003b50721717b6074a16aa5a1d3ebf0</string>
    <string>aee770fe2cf7c81bd6e08329b62a0454c7a0a492</string>
    <string>aef8ed05645af5844dd5696827f13d152e037abc</string>
    <string>af2282ef4084899c3953923ca58c1a6a8e86d301</string>
    <string>af34bb3a155f7b28c0fc6b10c0aa234bc65f07a0</string>
    <string>af5d911c90fc23164e5ab215f9c0373794d9e8e3</string>
    <string>af622c42791ccc63731fc353b1a9c54dfb404cf3</string>
    <string>af82157540491ed277cc58f7803bc4c2ef8ec10c</string>
    <string>af8fbf5550ee4a2740f9c542bcdbec51d55d7e1c</string>
    <string>af940054388112716ef9be69331b2b452adf9610</string>
    <string>afb1880c802d1a5efa23d47b85c979b9d214bf07</string>
    <string>afc43495321218ea85be8cec8d4fb3ebf86cd2f3</string>
    <string>afda21c384dd5cb6293d687321f3dc5db4a35278</string>
    <string>afe42efb276a22f0fc6da639e8feaad31fc1b776</string>
    <string>b031119eae656ad98091ecb639a5104880b37b41</string>
    <string>b03b91972ceadee4a8a2162dca8e9be3ca5d3c51</string>
    <string>b04cd6fc5648c8cf2eceae2b776d6b95af53a6c3</string>
    <string>b06cb1e175394b44ab9df971b198a9f017a852b4</string>
    <string>b072de8ea00c03b85ebba00ff0d03d8faa196d40</string>
    <string>b07963725c3aedf60500d16469c3962d15af8709</string>
    <string>b08bda05d20c128f6c1d9d433ed76cce74e03909</string>
    <string>b0e5229f07ae348abb45cd9681f6bb71931359e4</string>
    <string>b1068b3c957ec8fd6521ce40e1b99a5e6c676391</string>
    <string>b1168c6e5984916ae107daa8f6f592a787363967</string>
    <string>b1245b9f1bf1e9d9e03ab6dd82fcce31f241ca8b</string>
    <string>b126330c398df64567db47ca36acd0e6f88b1b37</string>
    <string>b1481ceaf6f5f9549dcaebedae757af632f7b5a3</string>
    <string>b177618e08d9be1d811e754476f5dfa85f20d14d</string>
    <string>b1915004d36ae099c4bb3ddcf900fc833860e41b</string>
    <string>b199d15de8192a5a219ca48df3b1d12b27054287</string>
    <string>b1c5182e2a28790d709c9f55b5a01feee6bc08e2</string>
    <string>b1e884661952ca004608f7d50fd41cdf7e3b04fb</string>
    <string>b1fc1f988a09a975d77a87dd4151eae0803bee07</string>
    <string>b22188c47c9d382c595c6550f2af62496c28ed3a</string>
    <string>b2280eed7a23cbe63e8be731d87a298e3b14f6cf</string>
    <string>b2636227521b3b6f87dddcdad3493ec77fd963f0</string>
    <string>b29e8e9d6f07e168d3eb7da816e39fc0584efef2</string>
    <string>b3016f1877ba5ad2a6049a6b3d523667143a76fc</string>
    <string>b3123d9b520cd567dd1b9cd9cc149704a2a5d622</string>
    <string>b36950699cddf4c1ec2e9a100bb43e9a6ec3f077</string>
    <string>b38738844d8b336d19a7ac59d490a8b3b871567a</string>
    <string>b39acc4fc52b49963955d5b27c5eba1e1dd791b4</string>
    <string>b39de3da35978d99e997f78cb7182c17a01a16f8</string>
    <string>b3b1ad739e75bbca010a4b840ee3bd2420f0c56d</string>
    <string>b3bc87773078b06e1158bbe977ab461f9b898bde</string>
    <string>b3d2de80b1c48c1bccb7611011d9fa997081b9ca</string>
    <string>b3e5b26680bf846a500ef9a525cc0a3fc7bf0f84</string>
    <string>b3ee08d10934bf9f8f116539d61d6079c9bb6d80</string>
    <string>b3f6228a61b4fbbc33db1f3c1150bdf67f6843fd</string>
    <string>b437087c2a92dc2c00c86f446679d32d4b055bf8</string>
    <string>b451fd9dd8778f19a1bc5d06b1bacfd944d8c2d1</string>
    <string>b497f218b62a9a23afd625a6ea2ad65a30310b35</string>
    <string>b4e35843809102e9c97ab934c8124353579835d4</string>
    <string>b50a66763b26062965e9acf8d3f8e5e77035d4ad</string>
    <string>b5223007e575f09837c8937e0b57afc5809bafb8</string>
    <string>b522765188d7d7275bed11944f930d51544db63e</string>
    <string>b54852feb72857bd63891d582cec36b09a78f516</string>
    <string>b591c7015a9c3557931fb3ea416f447575e7f70f</string>
    <string>b5df43d37902925690e5bf18f90d8734debb6ca3</string>
    <string>b61ecc23523f4686a2e942abea13cb3fa9a8a474</string>
    <string>b63d8cc8a5e5c0d3ac5861d5720572058668d2f9</string>
    <string>b650265b2a39f870507f14c82d743c06d2986c4b</string>
    <string>b67b7e4f0228718b6b92d1865620305516b15f98</string>
    <string>b6a9d687e95cd802ca344d87cca9b0aa16b7b870</string>
    <string>b6ceec65fce9449de3f978076f52bb938127fa82</string>
    <string>b6f4c76faaa171e72f73e3f42defcab5eef34c86</string>
    <string>b74cd0eb1ba7e33801e86814f0b790fc90a44a4d</string>
    <string>b791f5df505e8006d7dbcef384b817b4f79c6ebe</string>
    <string>b799b285c00ca6db33ad5cc37fc4e85aeebc4081</string>
    <string>b7d8c39f17d68a0bf212f1ba87f901f29a3aaabc</string>
    <string>b80e591daff08a81d6f9c4cc65015d10c87cd52c</string>
    <string>b82f88cdad6d5281beca9762f9f9f225f032482d</string>
    <string>b84bbe62e9b7f2ffaf83d985ced625b3b1d39a05</string>
    <string>b85cc24ced25feb448993e22d885848235150e68</string>
    <string>b8900b3d621c6725873884cbc97853ecf1286d18</string>
    <string>b8b6137c66d6d6933d51009c0ad3a47a39570be2</string>
    <string>b8bceefe8f61761fd92a3e5c8910eaa851421bd5</string>
    <string>b8cbcc9d7121e0331c850dbb7317f03ee4b813d9</string>
    <string>b8f6d4b74a3fab93ff256402a4c2f1d040d02ae3</string>
    <string>b8f88e3855e68b715c212d3570ee378d81eabf88</string>
    <string>b96323d7b7602102a58e16cb011045dd825d83ac</string>
    <string>b974a38090392c2b2b073ee4a12b1ab60e1fe423</string>
    <string>b97b248de19443f61937c0b4e85ab363173b39a4</string>
    <string>b97b78140aec1957ed86845e099f5283237a6fc0</string>
    <string>b985e0d9cfb6f2d520b2ba944da98b4f35c312b8</string>
    <string>b9ac7c2f25ab2083ba0c78b8eed66f8829e4cba3</string>
    <string>b9e9f3bacee9d4c3091028ae5be6346bdcdee937</string>
    <string>b9eeb424c3c86331c470b9b6dac5895514b8498a</string>
    <string>b9f37c468d5a5ef1b6673c59a8d106fd8faace3c</string>
    <string>ba05f23e5912ebe778b4907ddf204a36d329aca3</string>
    <string>ba08328f1d810c61aa469fc58a709cdab71ca9b6</string>
    <string>ba117ce19a7115ba54eb3f859e97a310f5fea8d3</string>
    <string>ba2298288c7b947287fe2567d5818dee52db2f43</string>
    <string>ba4ea16d6ed7bec1edb4fe3aac294539a664397c</string>
    <string>bab9e6ddb7e32c6df4fa13e6493a2fedfd7b6b16</string>
    <string>bb360f2d66002825addee221ec227c9e6ab4e066</string>
    <string>bb46ede0951ed69bafde2d194113b3020da50082</string>
    <string>bb8142de1b5bca497c733308a9da2ff92ea1e03e</string>
    <string>bb9b038d3b59b133bcacd68c555e8411038785c6</string>
    <string>bba376f9ad817c913755d4db10b646cf22f0e183</string>
    <string>bbb421deac00e5bf3cb6ee697a89b27b86f0fd8f</string>
    <string>bbbed2f1ce85311e0ba3e8de7b12de08e5cfedd7</string>
    <string>bbc11d8fbdbe69fe243d2dc4973fc8a723218043</string>
    <string>bbc56ebcb47a834327cffca0109e611fee478d3d</string>
    <string>bc04e975358b6b32ffca519f7aea49c41a460712</string>
    <string>bc636d7fe2a74e2788cb88c900d8fb392714db89</string>
    <string>bc7a51992b450a5d24e799b4067cc132f82e491c</string>
    <string>bc8b4c4dd61fe5a8c66d50157bc9227264fa56ad</string>
    <string>bc8f3d0e958c2b5901e8d10cdb04aba66f3e6c97</string>
    <string>bce5bb85754d6e95847fa021dc463b05aeed9bc1</string>
    <string>bd0d0ff4187e9d9114ac35f6143783b35be9ab98</string>
    <string>bd4cfa931a33bc3efde81f6a10caf81c617c75ec</string>
    <string>bd538b09578c7e004ce5f19b5f15ecd4b9b3b3e0</string>
    <string>bd56a9f80bcf9f09a220f669caf0badb20a2bdd3</string>
    <string>bd7b084c6bf5e2b7c4b5702d288b71c6a01c8fae</string>
    <string>bd8e31791135963e333ba1b899ac9e1f04a03bef</string>
    <string>bd91d89c9c62bee966c362cd6469336575de6a9a</string>
    <string>bdd566933eb62151cdf6bb7e0fad48ca72edb7fe</string>
    <string>bdd5d86d8f4ec55ba4de3b7389fc4290c819bea4</string>
    <string>bdf06baedb5b91758bc4fa2bc75bcce0a43330ea</string>
    <string>be4174e6f6488ab9667ac45b06ddd5e870f8ab54</string>
    <string>be5222bee900e5007ed48816b9e7f09f17e28c4a</string>
    <string>bec100fc84d3a3dd5bde40d6c9002916bbfe2f4b</string>
    <string>bfbd4f453f3ea12bb355ecbeda8487150f0a4496</string>
    <string>bff3d71f14c77f934acb41ebeab3a717a899086f</string>
    <string>c007bcde00c9f88784fac225832610ed5d206a0b</string>
    <string>c01e4ae82e402796681f7440803fdd8ea265ac1d</string>
    <string>c023a7ce0ef4fd36c220193d264eb7ba7615e6f9</string>
    <string>c03fa0f6532f98bac6227ca01e12c5f3ae72ef6c</string>
    <string>c06d0c2818d3fdca1132a77d4705290c2e7b07eb</string>
    <string>c09c9eadd2edc4f3c1509b5678fc7413408b961d</string>
    <string>c0a7c5150df99bfe96b95dbf36380805189d58c5</string>
    <string>c0aa5c6629a1421e21e6e29814dbf6c83ec211dd</string>
    <string>c0c3bed9730cb9b1ddef17c299d494b5ea6ff078</string>
    <string>c0f2edfc5c0b0a57e517a732a6437737d037db3b</string>
    <string>c1101f0d1c6d22a731b4273e0ad1b5412d0d8cf1</string>
    <string>c187419d6bc05914cfc04adb635a1d387075bf28</string>
    <string>c1c149627abff24f62f3d2cf281e33ee5341fa2d</string>
    <string>c1c1a12aee450a96873a393a9a0821db87e64495</string>
    <string>c202a689b58e412a46e74798b07b644faed64b94</string>
    <string>c2086becc1b872eb48c1db7c8566ec1a264ff693</string>
    <string>c22462b113f32e30aab3e2453af21e036d8c242a</string>
    <string>c2332fe6cbda13d453bf097bdf7a1a264f666bdf</string>
    <string>c2635b894816b01668870428e59b153f54ca780b</string>
    <string>c2b85dd2865de80b06ab10cbab26de990af43e58</string>
    <string>c3295eb517e2c57be03a540d9cfc69bdc4aec231</string>
    <string>c3776fcaa9f5970800b24978d9aba729d5c67347</string>
    <string>c37a1ecedcdbe0a1efb5a1aeeaff202070067ed7</string>
    <string>c386f5061b18808c966a2b106adeb034cae20ef6</string>
    <string>c3c08a20d8653ac753469f23241fed4d7ec80bb0</string>
    <string>c3c3ba162e4f6e8d011f93dfedfa60dd7c326df2</string>
    <string>c3d8d28daf828ef1d75da255cbcba2ee6f0f418b</string>
    <string>c3e850e427aaf8a1520018326318f70af23e2594</string>
    <string>c3f00ef69d1ba0795cda7943daad74dc6452e6ed</string>
    <string>c4779a9a29607fcacd2eda0a9ec19669353b3729</string>
    <string>c47cfaf8a059f96bdfa4a1b9a6487bbea97ca6c1</string>
    <string>c4b96c4f15efaedddb6a183728611059cc113f28</string>
    <string>c4bd291480e32239667668906fcb254d5d8b5b14</string>
    <string>c4d006b3d5a8bc6f5182d5c0f4fb2f882d5be546</string>
    <string>c4e6b79b4d5e17942fbf6a5220633370be72b363</string>
    <string>c5117c3ec7b5d88b0982a27c555b7732774d817e</string>
    <string>c52d1c14839315816940a0059ed8cf033ab21ce6</string>
    <string>c53d77b586f1fe84f45a30ea482ff1403874fbda</string>
    <string>c543fd3ee564beb27e466ece5699e424aec242b9</string>
    <string>c57b39543be82c6763693d900b3a623b7776b9ae</string>
    <string>c592ef746e751d904ff3e9116c1c4a69bc50f022</string>
    <string>c5a2635a20fef1440e1b99cbf226592812016506</string>
    <string>c5d55b6aad737b09a55a79ec0ad04e1f5c1677cc</string>
    <string>c5f58cc2eea22020a95e716aa3f34a46c28ebf08</string>
    <string>c62fc72fc12230dcd9f97e03828b13a1f8c970aa</string>
    <string>c632d36c6d45a6e21f4b33cbdaefbdf40c22cfc2</string>
    <string>c64e6d04a0deec990991da32202dc8cc77409030</string>
    <string>c658bbf1f22518f886171693ebcf9cfd27cc86c4</string>
    <string>c674f92f4387e3de36ad7c6e32edb39306439921</string>
    <string>c682f382a6548cce56905f5d8a2e1711bcc8548d</string>
    <string>c6ac15e63b34bb7f034c723fd1fa558efc50f50c</string>
    <string>c74f1666e747adbee0f19a93d5f66a1d58b7da6f</string>
    <string>c75b52e30958a67607b66d7908be5bcd4322e35e</string>
    <string>c80b051ca743c9132b6c45956918b446272cdc76</string>
    <string>c874331156a9a66ab80550569a7857b889cc6dfd</string>
    <string>c882a89bd835fc9637ae38f6277f4b647196af81</string>
    <string>c882ac243557394d0d108eec2bb09a6fac0a320f</string>
    <string>c888705eb6509965794b36b71a7dd73845b0ddd6</string>
    <string>c89335b7f497d73781bbe20cf2c8ee73997f055f</string>
    <string>c8ecec13af1c2974e46574c51f330c0af6f942ff</string>
    <string>c8eea111858a631cd8c34c4b5357666095549f79</string>
    <string>c91f1a81c7cd83b6e3e3eb71250281a62c9ddc13</string>
    <string>c964b52dd19780efc49e974557473e19679a8cfd</string>
    <string>c96f22e08a86d215af43ff46bf6e44a8d5233362</string>
    <string>c9804fe427c8fe2443ef978ee9033f98a0128220</string>
    <string>c98704fc0a5261cae4dbc349ecdb0e9a0ddd599d</string>
    <string>c9aeb4d656413732c4355e51e36110d0012d783e</string>
    <string>c9dcd221beb207b19a2652deae4c784fe2a5480e</string>
    <string>c9f0382f7fa27cf945d6fbce1611d58d83395aec</string>
    <string>ca1b8256013db0cce48b7ed628d7dc854cc34ae4</string>
    <string>ca387a4413112f0be97c2427453b0afe7f0162e4</string>
    <string>ca3aa1b5b79e88265d2757844ee85931c228710b</string>
    <string>ca47540ad8242d5fdc9ebeddf34d527ebad37658</string>
    <string>ca5c0bd40a46591ed13f2455b2c9c16dc2b25c8d</string>
    <string>ca81b6ab2b0d54ee24e0545de55d61e430d12454</string>
    <string>ca8f874b6e3dc8ce41b17615fc54304a53bf5f2f</string>
    <string>ca977a96d4a0765dc4fbb36a09ca6795beff0503</string>
    <string>cab598c46bc38715ae35aa3c471bdbbca1542437</string>
    <string>cacbe6c4796de11bc286cb08ce136d96b219016d</string>
    <string>cb0c37330fb5f8b69c04332b9009c4a6ac5affcc</string>
    <string>cb207cc8d6d36c0df243cf2cb3bc58cd3d40730f</string>
    <string>cb295ea4cd78514249ad16bcfcd1c781c46f1547</string>
    <string>cb43fe024bc4453d3cdcf857560ad005727267ed</string>
    <string>cb6b5985bcd5bbd0842e719a748d9be6f55092c1</string>
    <string>cb7bfa6cd01f5789354f8e4871c23dd290365b8a</string>
    <string>cb88ae365c2cf602eb404cfb1788709b4e91dbee</string>
    <string>cb98da5035ac3b48a7a006ab7c1b8ac9c8a1c789</string>
    <string>cc00e74264bcbd193d8db804109654bdf09b520c</string>
    <string>cc8df402cd01a53e882686f8e234be95be89641d</string>
    <string>ccd11e9dde398bdc065285994a0f3ea034969466</string>
    <string>cddc3709cb481c058da37968ee0fb449f3648627</string>
    <string>ce2af990d77d67d1c6e32af53deb1addfcd6a25c</string>
    <string>ce3952b7e4bcefc1b8ce1f5002e180ec2f23b4ff</string>
    <string>ce50f7552ffc12d724b254b46b582d8c02a422dc</string>
    <string>ce56d2ece8e9e5ac03a48ee9f1ac388e2940b7e1</string>
    <string>cee9c71caab4d3cd80f353cbd4aacabf99273054</string>
    <string>cf32c701ba3b65992c2c05c2682d0f320478a2b5</string>
    <string>cf349bb75c8bda9b8b1f30a67d06ce0072611e9a</string>
    <string>cf7eabfce40f400c90518cbe6dc828cbefb01c53</string>
    <string>cf9d1347f18852749409948bad5ac09e5da1f472</string>
    <string>cff14201fe9a0a74ec8a7e37b4314a2c97134789</string>
    <string>cff927fedf3802e0c5a237b5a346584697747df2</string>
    <string>cffe0618135c31f038221cbdc4362affe20defc9</string>
    <string>d06ab7da209a7496e3d6bb69aec6507e51d23647</string>
    <string>d06d8b16e67222e8a83e5c0b442e625c7941d83b</string>
    <string>d0a8f1929127cf1516773f81e7bc0684832a7b4c</string>
    <string>d0c24bc161625601a9b92ca11efc8e6478206401</string>
    <string>d0c2535a5b56febd0ac081d279347a0b6aa633cc</string>
    <string>d0e49fc05670541b03cdbd32aa701d91b4cba178</string>
    <string>d105d84204d62dcc1f6a532fe473189fc896723b</string>
    <string>d12156ac73054487c9c7d0861631166140e1a0d4</string>
    <string>d13f7f4eee09bcf6649893ced7ed477bde50b582</string>
    <string>d164a3ed2fb0566305b0815a039fd021499feef2</string>
    <string>d165f070fa60697eaffcfa4de0dc1f5b7ddcfc87</string>
    <string>d173b350addbb8b9d2101f8f01622efe7008b24c</string>
    <string>d1c41fb67e36964547543a8627617a7c1e52eedf</string>
    <string>d1f0920eb742e33d39d34480ed379f5111db69e7</string>
    <string>d20b51644aae91b072c9f757be4171936c2d5697</string>
    <string>d2230299d7a678bc9b961068f141c54aa0d60def</string>
    <string>d224d5ce1bc4715542fe044b9d2d50c58249620b</string>
    <string>d23ccc7a81527659652da9fa0a38b45cfe95b641</string>
    <string>d292b250c7192ea0f356d175466d6881707fbe9c</string>
    <string>d2998c63cfa74e50486bdc29a026b88778fc918d</string>
    <string>d2a3163325ca073c07756a9436a849ba140bcc6a</string>
    <string>d2a3aece93acbeaa71c46dd9a67c3ddadfb65126</string>
    <string>d2a87fb4a09c38265d03a9d2228544d537929d37</string>
    <string>d35051672b66399afcdf62ba14ee1e438084fa27</string>
    <string>d354eb7181ea456928f0ffaa01d7319c9d48a3ff</string>
    <string>d35d00d7f135e1c193c2830a2a263aefbb4a649e</string>
    <string>d36876dfbf769fa38b7d35eb190afb5fe7140285</string>
    <string>d368a32537a76b98c1f29d635165faf69666d9ab</string>
    <string>d3b8d57f5fd65938807f906367ab26bd5d53d349</string>
    <string>d40a099d0e87da193d41eda22c2c73e5b0079abf</string>
    <string>d4114e86b3e037f6317065c261ca464b07b1b398</string>
    <string>d475b425634e8185639bcf7cb7b54f83a7b5c3de</string>
    <string>d4b4ff31209829a10103fa5f47c4da766ea48be4</string>
    <string>d4c10d1b01e06cd0990c2d4e452c2053c6c56cd7</string>
    <string>d4c2d47f0368a4cf8d10593ee4ee5885fdc07a52</string>
    <string>d50b69030bd7fa29ee28da322e323de481fa73a1</string>
    <string>d531c1a746fa16d1043abe719986743575f14838</string>
    <string>d56ea6bd6e3d89f043c593ed3dbb249db5d25bb8</string>
    <string>d5cc1b792048f64ab73c6c8e4d8724e3695f2cdf</string>
    <string>d5cf3e86076074cc2a598de2050b9e6259ebb6bb</string>
    <string>d5f33e431ded36fcb40beb82ce971ef2e0c22e58</string>
    <string>d63796a8fa90f605ab8c6311f89677718f078a1a</string>
    <string>d6484a9c44b3e6c8924cbfed3fb59d7676fdb249</string>
    <string>d6676d64e7ac490eb04b8046907c1e00f8eb52e6</string>
    <string>d68c350b9f952fd45f058236ea122c549818538d</string>
    <string>d68f12af8dc6fb93dec5240f533cf234020ab392</string>
    <string>d6fa8f9d04cce41878b77716a4a413ac607c9213</string>
    <string>d74c73e014ed201c52d10cfcdd69f7f9a8f3c843</string>
    <string>d7ee5b4cc3b30ae2f183d5ffd0e4006ac40e45c6</string>
    <string>d825b94e02b994382b8cec0449ea53aa2f49e820</string>
    <string>d826dd38985afe069145ea662f80b6b8742a060b</string>
    <string>d83ae962774b5cd2a3cb761921fe8bd5dfa30193</string>
    <string>d8554412be968384d3afe29815f7a3107e8301a9</string>
    <string>d88bf40c8d6f9816b09bea97be4586c0e177d9f9</string>
    <string>d8ca9db11f1a4dfc76b4ce273a3bfd474522a736</string>
    <string>d916746142d95f8fccde8453340d3d0a11877a22</string>
    <string>d91f72531daff0cc4f154f93e96fdd60a44df1c3</string>
    <string>d9357a9c85efa0d415918b0603aba4605871283a</string>
    <string>d9756714335efe021058eae12531b4b93f4de003</string>
    <string>d9d113ba679815bbde39ffa25a929b2361d9b180</string>
    <string>d9d722967c6541700bc1ffa4bcfb469a84dd8ce8</string>
    <string>da11a83d6c5612a422edf8f148576b35baf1972c</string>
    <string>da33eb9e60a7377fc1536837952cf2245ba3585e</string>
    <string>da3f3ebc2010aba304bb99dd7e6259f1b4b61f7d</string>
    <string>da46afb59e0cfc05501a73de5bf7404c1ac7df8c</string>
    <string>da544c5ed51d3246569c9e3c4c7847ed21edbe20</string>
    <string>da99c5715dde86f16f34e73c0fa9b621689469ff</string>
    <string>daa7f119fa4fef3b18c92387614370dae1637fd9</string>
    <string>dad163b712b54a09159edb5e11e1d0f6987c2ec7</string>
    <string>dade97da3a495edc1732d1a3ea1b21a1c3b75c24</string>
    <string>daf1115d8a7c7f8a0075a05c824cb006a34163dd</string>
    <string>db1790c16701b418ee2ad402f3239f100138058e</string>
    <string>db18a232010620c583d59c665ff472a63e25e05c</string>
    <string>dbcd6e490b97daa89abc797045b737d8300fb36a</string>
    <string>dc1b96e63e08d0902daba444e6533e600bee735d</string>
    <string>dc3fe3e67ec17c689e92fad8487453d89fb37e10</string>
    <string>dc919d4ae3866ff0bbb17cb4aae334c4838fa345</string>
    <string>dc9210782c686c8d36256f80d428f082626fd4df</string>
    <string>dcaa07f852855470c8ae1f3ebd0533bb3eaa807f</string>
    <string>dcab4c4a8682361af53dea0ce2e1d49ba81250fb</string>
    <string>dce864307cde32a0b752fa8220c729652d38b15c</string>
    <string>dd085461d5812a13f738d792c6b4fd494cec5a8d</string>
    <string>dd3492a3be7ef19e2506b2d03d870d2935c524ec</string>
    <string>dd3d67dc4df5212dd9004147e164e6dcb718b4a3</string>
    <string>dd8fa63fa960c40a3d49211e1599c8bba54d8eae</string>
    <string>dd9e251d6e47420557bfa72739c859784d0ae900</string>
    <string>ddb9f2b57d4522a519594dc2856bddf4e25ab7cb</string>
    <string>dde0d38bc9886d856f2ee136b079def0d133a3bc</string>
    <string>de14d5cf0e1735db50e37727d054685f0b7a9ce1</string>
    <string>de332074d9e3617b1aa3fa14d85c096114ba3a3d</string>
    <string>de34babe44f95f1e6723be0f9e69b1a73012fcfe</string>
    <string>de61453056a843a1c1af5366d4aade96a0dd6204</string>
    <string>de670b6466ad888b0361abef4fc6549b22994bf2</string>
    <string>de7986db4fc6f9a37594d9368bc7bc1f17ca6a90</string>
    <string>de80d6c25b956600cef77b12bdfb3dcd2a853668</string>
    <string>de842301343b67435abee00f06321e5f28143d7b</string>
    <string>dec30bbe6c41afaa7b8b8099574fa299cc513125</string>
    <string>ded662bfbb3d1676ceb26c5dd3a7124fad7a5a30</string>
    <string>dee4b5b26db29d6a5379910501240be6fe2ac6f5</string>
    <string>df3bc1c6bdcddfec7d02021dc6f51f389e20eb75</string>
    <string>df424db376dff5986ba4e558c9a8959010325bbe</string>
    <string>df607ad7cd9ba5729eba41f5933c48b6ee54e20a</string>
    <string>df763592dc2e5f01171a6d954fb0d7347460d4c4</string>
    <string>df8d240d66b7f639d07465b189afb3e007faf12a</string>
    <string>dfabf39daf6ea6f72d38ca4c4811ffd586ba6059</string>
    <string>dfb9028d414f153582cbaf4dc945346cda79c435</string>
    <string>dfd08ef4935c2565be4fcfa74d321f9617271d49</string>
    <string>e020444068eab0f7314699f944ebb6b7748b01ce</string>
    <string>e03a59991e1e5799e8eef226b33a1b6f5dc8f208</string>
    <string>e03d19630d7bedf452a506b3b84a2549d209090f</string>
    <string>e07fc0e667bb98a81ad13c9c6570fc4a976c5edf</string>
    <string>e189987171dcb724a07c54efbb29a0fd0d654509</string>
    <string>e206feb465c980ef7b6876f5ed5a9db541e033ea</string>
    <string>e27081cd4f164f18da3e887826bbc273fbb2d10a</string>
    <string>e2724732fe2139764baf66478b3b663a1d94680c</string>
    <string>e288270c4bc98ca3ac215591be2480795689b0e9</string>
    <string>e2a149939fa18f05842f6ea5c1ee688e5e12e08d</string>
    <string>e2b9adf3281ff9f19226c692ef5b417f8456a4c4</string>
    <string>e35a73d16bfe15a11dd0e334d3a5b8ec00bb6822</string>
    <string>e3da918fda04928e36619b6dec73c03693c3d44c</string>
    <string>e3ede9fc8bdda5856916834988e336b47dfea965</string>
    <string>e402008315dfc18bcfc78331e9198581ac78ebac</string>
    <string>e40a8d90384dd84c3a15cabcac1947ae49e20654</string>
    <string>e4b0d4cba478ed907313dd862bf462e35aff2c26</string>
    <string>e4c83cb107d068d62d1f17ea54c96451932b2526</string>
    <string>e520cd36401b6e1db3bf2593755090afdc4f600d</string>
    <string>e58094f6ce00932de0e7ab276e0a8f15200c251c</string>
    <string>e5bac05b4edfee9f67f04dbc1785d4a7ff24ee82</string>
    <string>e605d75ca02d7d83d3d01e1052ebb45956c4eefc</string>
    <string>e636b9dace360dd741bcc7a81dfe2caea96fffc1</string>
    <string>e6968c7a1d6632141a1b09685f8224c9265c1a9f</string>
    <string>e6ab7d581e9302d500122e385d786a5ca2b9dfcd</string>
    <string>e6bcf89139ffa0d010f7f281431d4994f1eca8cd</string>
    <string>e6bfeb5b46d610a290455585a867ede1dd82cb1d</string>
    <string>e6fc406786fe31999f7b46506fbc41592a506b66</string>
    <string>e775e6340c0a0d9be3b5a593d5d940e6075734be</string>
    <string>e7fa4822c1d846c1fa661ee5ffd09d705b45fc2a</string>
    <string>e84f15064e0abda26c7a70aa54e59cd8e599d4c8</string>
    <string>e8572d2f0075d3a9f4ad65cd061b367bb50f9909</string>
    <string>e86613dc08bc38ac4c26195a992f313d87845298</string>
    <string>e885ff959ca473f05cd1f51452dfd9c2d5f3e391</string>
    <string>e8a3957b5a54faa85416fbc0c6aa581c67db22e4</string>
    <string>e93c3235a2f24ed0a06fecb052d0bad5bd048f03</string>
    <string>e96a65c5cc57e0338ade067129ff910f4bda135c</string>
    <string>e96d87d7500ecb7385e35cc543d09f18e923d77f</string>
    <string>e97dc0f5eab2e2085e76c95cb9a6d0073714b487</string>
    <string>e98f9705ef0d267d4371ced4e718a9878d190dca</string>
    <string>e9b34c6f987c487f7b2d2afd00c91924927040f2</string>
    <string>e9c04dfae67212cc0f004706487c95d9aa334ccc</string>
    <string>e9ed0c9ba114745b54990f3073e9d0ef338a5c18</string>
    <string>e9edb372823e7c3e57db403046c3543245d06ac0</string>
    <string>ea0ac3759f853d32c141225d925b811123816797</string>
    <string>ea24a30339ff5df6369f352603c4107b3d86f4fa</string>
    <string>ea4f5e8612a3cc40e48c28698e5b8a09d42f0093</string>
    <string>ea70a522fdf5a7e70e948ce53f0913b670c9596c</string>
    <string>ea73d44663becc229e0b1f5aff0f0765f1fbfa41</string>
    <string>eaa9016a000e66d6a7de1d705cf753f9929de486</string>
    <string>eb0e786dcf00525c6f54cb4265ab163d2230fe2d</string>
    <string>eb3a0dae2e895fa45f4f7b15fc211c8fd8ea26f3</string>
    <string>eb5b5e628104ffd4832000ace3964ad0ed052034</string>
    <string>eb6e4e36e0c243332d69fb449ef60413b960db1d</string>
    <string>eb808f6271649b8386b5533ea7602f45321ee029</string>
    <string>eb90dba04741c635c2bbd3b548a2594be5595c7a</string>
    <string>eba7fabc3ee0407cde3c9a8afc5f5adf29a11dbe</string>
    <string>ebed20b4103643517bf5b870976bafad79d5438d</string>
    <string>ec2ee9240bcf4c0e19c0f6b702614d8d8783671d</string>
    <string>ec32cba636b462286538a950256178e57018f676</string>
    <string>ec45858e0f927d8c9d018eb30ee8fbae5fd7a4c5</string>
    <string>ec972a05eacedb071f13bc6c4a31c12edd9e03c3</string>
    <string>eca2a355123e067490d9d805f054b6896b393e6b</string>
    <string>ecaed0f44603f6086a74175e63887c1e3ccdcb05</string>
    <string>ecbe973b40d4f09a828b019fcd562ae231f0b561</string>
    <string>ecc998303aab058161e6faf95a0ce3d708765ece</string>
    <string>ed1c23ec93d51e1c09990813f1e47aaf76ea692b</string>
    <string>ed84d00568130cf16957594719689725fd379736</string>
    <string>eda7b5876d90a9f41ad9e6191ad85c51091f671c</string>
    <string>edc3d432ca2b93b7cec2dca750151fae29d7a520</string>
    <string>ee031f1cd2305188f2fdb25c3bd0eddbf7fe3050</string>
    <string>ee07ce8cd14aa0d6ed9b8d71f719b0e3cf823491</string>
    <string>ee1ee08f1886b6fde2be0712ac7ea997921d580a</string>
    <string>ee4749f933780a44f3c96142cee0e829d093fcc7</string>
    <string>ee9b978c63468c69d2edaed162a50a123257b91f</string>
    <string>eec5c6958988a6cce635cba8ca27edff3e138303</string>
    <string>eecf650b08682e6c30a7bdd1ae8b7318fe791e3b</string>
    <string>ef052890d78f4c148d139a58c6cf7a69966e7af7</string>
    <string>efbb72fc43cd990144a63367cc5b5f1087698e4e</string>
    <string>efe93aac7d56e9c1a5bf66e80f56b3505c9f3554</string>
    <string>efe98063c329d096d3022734b882f764e980027c</string>
    <string>f007a33e8dd87d80c097acc39d1f915da1119a4e</string>
    <string>f02030e93cc3c34f8a07620907d135645507122a</string>
    <string>f03c040ce6128fba18c00db3ae9726e6df3f6ac2</string>
    <string>f0423b881c521590f852ac52ead70e9f35be7414</string>
    <string>f04c8021913b85b43007787f730f705b7f0c4ce5</string>
    <string>f0571a15774d8a788f9f7327c9625b410c7239d8</string>
    <string>f057bde01b72d41b48b87fecc210e30848a928e9</string>
    <string>f064e089eedefe73d2be15ca89060f2dea91f4dc</string>
    <string>f126abca1169673d6f6159ddd5e69ecdf92beee3</string>
    <string>f154dc3f14c63534c2a80a7f6b2a03b4f57d4590</string>
    <string>f192eef6fdc2ab3db7153ebd51d45d33225d1b34</string>
    <string>f1f92a62ce9bfb894143ab50365d56d232d8040b</string>
    <string>f2005e0b69abc89c0d700a2b1de676761bf1c0b2</string>
    <string>f21a33abef83fafed0a20ae1313e1466b6fed19f</string>
    <string>f24a61eccf366dfd7c338c5ac3f242487868b25e</string>
    <string>f24e645500ebfa0e8487091bb5685511403de1d0</string>
    <string>f2649d51c959d33c89d0a735c45e576a8bb71593</string>
    <string>f316cd8708a99ac20c2adaf8e2ff0d9f544e1d04</string>
    <string>f329c7c192b68fdc4fa4677a5fe79680da037787</string>
    <string>f3e8ab43ccbc51dc6ec1f49ec347ee01ec49fc1f</string>
    <string>f3f5d19bf9565d7363a0fd2492565a507d3af55f</string>
    <string>f456e864163e175fbbd7efee2f16e58e44bf3b03</string>
    <string>f4a7e9c9829fca5b0e73a0d24a27c7d4b8176bb8</string>
    <string>f4b689dfbff923fcf0fcc1ed1c661a3da9da73b9</string>
    <string>f4ec50a4f5f232d75863bffdef6baa993a0da9d6</string>
    <string>f4f61a5e273696e45d9217ab6f6719c61f5e58ce</string>
    <string>f4f62fcf76d1f564de8bc0ed6a519755d1d34046</string>
    <string>f51a9b42630220b199e9b6c442d162f3aec7a6a2</string>
    <string>f53e68b2bd286903f277355be7af412d4c452a70</string>
    <string>f5666c4f1660e714f93cb5743197c5b28fbafeef</string>
    <string>f5699bc7bd21b1fc3cfbc0ad1ce8ab57774fde19</string>
    <string>f5716b2745a8c9a99c157654a64e3257c5e0dad5</string>
    <string>f59d52ba2fc21533367131e8f5e9a7fd98c8b1c7</string>
    <string>f59e5d4bab1dd457aebb016b4d81729231ef825a</string>
    <string>f5be6d48265444d8564124e8890fba227b37e93b</string>
    <string>f5d8393f7257fd302c757e6f00dc089861fe980e</string>
    <string>f5df1f9ed923bacb6c3ed67a9dcb7c60afb7c80f</string>
    <string>f6207223ae883b876c48b734c08db77243e82da3</string>
    <string>f63488d5ab28eb0e93fa19ad4593c2a2393513ec</string>
    <string>f65c7d3a7998d35c4ffd6ece6fd20658fa5296e3</string>
    <string>f6803d64fb33323f70f5a0c24db16c0e385b1986</string>
    <string>f684fec2236f99aaa6c4c0c7055e5f7a2c04765a</string>
    <string>f6898071826b5abd22feefd4f87243c56b192b35</string>
    <string>f6cf65df8ac40d019df2635eba7c2364c280436a</string>
    <string>f73f98d76a4e157423b86f03f687a3d8fd392bc7</string>
    <string>f7a3b1a268175f6efa77089b8db3f6943a1b98a6</string>
    <string>f7b8cb6663c1de53eb9e5a6c652402a29503255f</string>
    <string>f87aec21dcb899d57d409e14842f7353940a59b4</string>
    <string>f88a1045571517031a00329bf1bda50baa4d5c06</string>
    <string>f897d9db812197b66b8cd5594a9e1658dc2dafc0</string>
    <string>f8cd664c9097d3b3148271e496834abf9bfc8b90</string>
    <string>f8e6bdb538662c5f0d173f4c5cf6983567b6a3a4</string>
    <string>f8e738f5db0694c77b5af1ffb1c7ee78a6298fb2</string>
    <string>f8f628b95d31a8557caa715cc9a0291bda6bf982</string>
    <string>f978fba9043cf7eea2d8e2e9c660472a9c53bb8e</string>
    <string>f97df2f868457cf2bc014fa361c86cf99ba524a9</string>
    <string>f9c2bc6d5c0569fde9a5aa5603b6a84ea24d9d9d</string>
    <string>f9ce70baf88f96fbe9e04fb0141e0c755de04a45</string>
    <string>fa0239e19116107dbcff22716cf83eb64a771525</string>
    <string>fa25084d99d9cad6204cf476633424ac013a6457</string>
    <string>fa26a28c84ae9a5162a8e54578ae28da462ea88f</string>
    <string>fa67565719633ba60f68acb586d17850ff6d9356</string>
    <string>fa6c3762518b4574a3dd016e0046f8f4b318e351</string>
    <string>fa8aceb6b702c128e73827e28643901e428965ce</string>
    <string>faa59edb5eab0b743df88efac3bd8448c10064f1</string>
    <string>faa94c46764fabcad57c0ca8221ad41be5c0dc7b</string>
    <string>faaa4d98c7c5595db728afaa4b6b85d6e79dd32e</string>
    <string>fab591c51483549c9c2739c3f5b3c94122f58b47</string>
    <string>faea9ea8be36bc8584e23f941a66793cf1cfcdb1</string>
    <string>fb3cb18f639ddce630ef0c3c3d76ff671d729dda</string>
    <string>fb6bdda26bf4b5d82b5721f0ddd4f71784e6b5cc</string>
    <string>fb847a29e51f7ec9ff4da942b595ff708e972d49</string>
    <string>fba310c0940b07bbd5b10cb02c45bf8ce3ba657f</string>
    <string>fbaf6b77cab62bc881915a0a708518098c9b11dc</string>
    <string>fbb8e9beb2fcd79963b34a0c6a9d71ce04be9bf8</string>
    <string>fc5718cc063c27aa972067608086e20b3bd3144d</string>
    <string>fc6d984cbd0dffe1998411e6d30d546b8278242c</string>
    <string>fc80a3001ee6f31f6c5aeab5c084e5f0dabba106</string>
    <string>fca5a2b7eb5f95dee139e5b78f704b65872dbe0e</string>
    <string>fcc19424ada1e390c98d85ba9cb98568de4b0dcf</string>
    <string>fd0beb4b21c541de99eb9d567e6094eb3068e550</string>
    <string>fd599f6a79a4cfcd50a6eef048b7cd8b6da74a84</string>
    <string>fd6fa9993f15ae6167eb8e2925d52179409ba73c</string>
    <string>fd7f5095906b3b10fcd5e7d2d293ea9a036fbe1c</string>
    <string>fdcc409ceefac9277c4f15d50266d4ee5dd89802</string>
    <string>fe01fedf69adf95df4efb10f4386132078fdad1b</string>
    <string>fe096eb95ea65065f3a7805ea9e5cef63e4d22ab</string>
    <string>fe224e563dd08b019284809f4841ae70ace9f5e6</string>
    <string>fe2e969f817a85abde6b6fb0565876207b20ac39</string>
    <string>fe2fabd9b69f1e4313f108aa17904efad2b682c4</string>
    <string>fe3171246048365c5dd190ba84372a73eb95aa43</string>
    <string>fe345d4bdb0d73ae65b4bbeef9372982e326c8a7</string>
    <string>fe5337be3a1fd18e19057e78ec81364fa8ddfa72</string>
    <string>fe5dc416b5cae71530fba8a6eb0cc727b3faac10</string>
    <string>fe6e8b9eac68e6ce8edefec9a228cc63c1a397f2</string>
    <string>fe722ba3412c07aa504e3b67f2c5b22c773899c8</string>
    <string>fecb1d5d064cdd188495692cb89e1467fc2ddfea</string>
    <string>fee03346eb0ca09a7d93d4d60d086a4259af2cbf</string>
    <string>fefc4a551a2259978fb8dcbd3904560c05a4b053</string>
    <string>ff15c9e08216c01bc42ecfb5b39d702371611548</string>
    <string>ff837e92c445af6acb8b7991573f65de458e40a9</string>
    <string>ffab289f34f7ca29e0927d0dd3ef8bcf09fd2738</string>
    <string>ffb4b03273bd9ba693e8d204197e7007b62374ab</string>
    <string>ffe197bcad9c8be0f602152554a73756f9f3ce4f</string>
  </approvedScriptHashes>
  <approvedSignatures />
  <aclApprovedSignatures />
  <approvedClasspathEntries />
  <pendingScripts>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-11-linux_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_ppc64le"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-11-linux_ppc64le", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_ppc64le"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_ppc64le", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_ppc64le", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_ppc64le", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_ppc64le", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-11-linux_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-linux_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-11-macos_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-macos_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-macos_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-macos_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-macos_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-11-macos_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-macos_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-macos_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-macos_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-macos_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "windows_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-11-windows_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "windows_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-windows_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-windows_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-windows_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-11-windows_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_alpine_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-17-linux_alpine_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_alpine_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_alpine_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_alpine_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_alpine_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_alpine_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_ppc64le"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-17-linux_ppc64le", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_ppc64le"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_ppc64le", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_ppc64le", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_ppc64le", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_ppc64le", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-17-linux_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-linux_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-17-macos_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-macos_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-macos_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-macos_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-macos_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-17-macos_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-macos_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-macos_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-macos_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-macos_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "windows_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-17-windows_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "windows_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-windows_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-windows_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-windows_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-17-windows_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-18-linux_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_alpine_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-18-linux_alpine_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_alpine_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_alpine_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_alpine_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_alpine_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_alpine_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_ppc64le"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-18-linux_ppc64le", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_ppc64le"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_ppc64le", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_ppc64le", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_ppc64le", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_ppc64le", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-18-linux_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-linux_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-18-macos_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-macos_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-macos_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-macos_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-macos_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-18-macos_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-macos_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-macos_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-macos_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-macos_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "windows_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-18-windows_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "windows_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-windows_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-windows_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-windows_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-18-windows_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-19-linux_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_alpine_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-19-linux_alpine_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_alpine_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_alpine_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_alpine_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_alpine_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_alpine_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_ppc64le"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-19-linux_ppc64le", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_ppc64le"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_ppc64le", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_ppc64le", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_ppc64le", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_ppc64le", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-19-linux_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-linux_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-19-macos_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-macos_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-macos_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-macos_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-macos_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-19-macos_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-macos_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-macos_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-macos_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-macos_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "windows_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-19-windows_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "windows_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-windows_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-windows_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-windows_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-19-windows_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-user-linux_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_20_04/arm64"
        reuseNode true
        label "linux_aarch64"
        args "--mount src=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,target=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0,type=bind"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_alpine_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-user-linux_alpine_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_alpine_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/alpine_3/x86_64"
        reuseNode true
        label "linux_alpine_x86_64"                       
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_alpine_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_alpine_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_alpine_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_alpine_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_ppc64le"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-user-linux_ppc64le", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_ppc64le"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_ppc64le", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_ppc64le", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_ppc64le", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_ppc64le", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-user-linux_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "linux_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-linux_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-user-macos_aarch64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_aarch64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-macos_aarch64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-macos_aarch64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-macos_aarch64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-macos_aarch64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-user-macos_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "macos_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-macos_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-macos_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-macos_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-macos_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "windows_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                        setGitHubPullRequestStatus context: "validate-pr-user-windows_x86_64", state: 'PENDING'
                    }
                    env.VERIFICATION_RESULT = "1"
                    if (params.SAPMACHINE_VERSION.isEmpty()) {
                        env.SAPMACHINE_VERSION = params.GIT_REF
                    } else {
                        env.SAPMACHINE_VERSION = params.SAPMACHINE_VERSION
                    }
                }
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Verify PR") {
            
            steps {
                // credentials are needed to avoid rate limit exceedance in verify_pr.py
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    script {
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                            def platform = "windows_x86_64"
                            env.COMMENT = ""
                            if (platform == 'linux_x86_64') {
                                env.COMMENT = "-c"
                            }
                            env.VERIFICATION_RESULT = sh(
                                script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER} ${env.COMMENT}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {
                                error("Pull Request Verification failed")
                            }
                        }
                    }
                }
            }
        }
        stage("Checkout SapMachine Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh 'SapMachine-Infrastructure/lib/checkout_repo.sh'
                }
            }
        }
        stage('Prepare Devkit') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; !params.DEVKIT.isEmpty() }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'openjdk-artifactory', usernameVariable: 'ART_USER', passwordVariable: 'ART_PASSWORD')]) {
                    script {
                        String[] gav = params.DEVKIT.split(":");
                        if (gav.length == 3) {
                            echo "Extracting devkit from GAV coordinates: \"${params.DEVKIT}\"."
                            sh("SapMachine-Infrastructure/lib/deploy-devkit.sh ${gav[0]} ${gav[1]} ${gav[2]}")
                            env.DEVKIT_PATH = sh (
                                script: "cd ${gav[1]}-${gav[2]} &amp;&amp; pwd",
                                returnStdout: true
                            ).trim()
                        } else {
                            echo "Devkit not in GAV notation, assuming path."
                            env.DEVKIT_PATH = params.DEVKIT;
                        }
                        echo "Devkit Path: ${env.DEVKIT_PATH}"
                    }
                }
            }
        }
        stage('Download Prerequisites') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -d `pwd`"
                }
                script {
                    checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[url: 'https://github.com/google/googletest.git']]]
                }
            }
        }
        stage("Build") {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
        }
        stage('Copy JTREG') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true }
            }
            steps {
                sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py"
            }
        }
        stage('Run jtreg hotspot') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
                TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
                TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
                TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()
                        jre_bundle_name = jre_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${jre_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
        stage('Create Brew Casks') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE != true }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    lock('MacBrewCaskGenerationSynchronizer') {
                        sh "python3 SapMachine-Infrastructure/lib/make_cask.py -t $SAPMACHINE_VERSION"
                    }
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Build and Publish RPM Linux Packages') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'rpm-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: env.SAPMACHINE_VERSION),
                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        aborted {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-windows_x86_64", state: 'FAILURE', message: 'job aborted'
                }
            }
        }
        failure {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-windows_x86_64", state: 'FAILURE', message: 'build failed'
                }
            }
        }
        unstable {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-windows_x86_64", state: 'FAILURE', message: 'tests failed'
                }
            }
        }
        success {
            script {
                if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {
                    setGitHubPullRequestStatus context: "validate-pr-user-windows_x86_64", state: 'SUCCESS'
                }
            }
            cleanWs()
        }
        unsuccessful {
            script {
                if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {
                    sh 'zip -rq workspace.zip .'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        node {
            label 'built-in'
        }
    }
    stages {
        stage("Checkout Infrastructure Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init SapMachine-Infrastructure &amp;&amp; cd SapMachine-Infrastructure
                    git fetch --depth 1 https://github.com/SAP/SapMachine-infrastructure.git master
                    git checkout FETCH_HEAD
                '''
            }
        }
        stage('Backup') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) {
                    sh('python3 SapMachine-Infrastructure/lib/jenkins_backup.py -s /var/jenkins_home')
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs deleteDirs: true, disableDeferredWipeout: true
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        node {
            label 'built-in'
        }
    }
    stages {
        stage("Checkout Infrastructure Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init --initial-branch=master SapMachine-Infrastructure &amp;&amp; cd SapMachine-Infrastructure
                    git fetch --depth 1 https://github.com/SAP/SapMachine-infrastructure.git master
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage('Backup') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) {
                    sh('python3 SapMachine-Infrastructure/lib/jenkins_backup.py -s /var/jenkins_home')
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs deleteDirs: true, disableDeferredWipeout: true
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Checkout JMC Repository") {
            steps {
                checkout changelog: true, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/${params.GIT_BRANCH_OR_TAG}"]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'jmc']], userRemoteConfigs: [[url: "${params.JMC_GIT_REPOSITORY}"]]]
            }
        }
        stage ('Download Prerequisites'){
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build and Basic Tests") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/jmc/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/jmc/build.sh'
            }
        }
        stage("Test") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/jmc/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                expression { params.TEST == true }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh 'SapMachine-Infrastructure/lib/jmc/test.sh'
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.zip'
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Checkout JMC Repository") {
            steps {
                checkout changelog: true, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/${params.GIT_BRANCH_OR_TAG}"]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'jmc']], userRemoteConfigs: [[url: "${params.JMC_GIT_REPOSITORY}"]]]
            }
        }
        stage ('Download Prerequisites'){
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build and Basic Tests") {
            
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/jmc/build.sh'
            }
        }
        stage("Test") {
            
            when {
                expression { params.TEST == true }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh 'SapMachine-Infrastructure/lib/jmc/test.sh'
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.zip'
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Checkout JMC Repository") {
            steps {
                checkout changelog: true, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/${params.GIT_BRANCH_OR_TAG}"]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'jmc']], userRemoteConfigs: [[url: "${params.JMC_GIT_REPOSITORY}"]]]
            }
        }
        stage ('Download Prerequisites'){
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build and Basic Tests") {
            
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/jmc/build.sh'
            }
        }
        stage("Test") {
            
            when {
                expression { params.TEST == true }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh 'SapMachine-Infrastructure/lib/jmc/test.sh'
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.zip'
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "windows_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Checkout JMC Repository") {
            steps {
                checkout changelog: true, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/${params.GIT_BRANCH_OR_TAG}"]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'jmc']], userRemoteConfigs: [[url: "${params.JMC_GIT_REPOSITORY}"]]]
            }
        }
        stage ('Download Prerequisites'){
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build and Basic Tests") {
            
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/jmc/build.sh'
            }
        }
        stage("Test") {
            
            when {
                expression { params.TEST == true }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh 'SapMachine-Infrastructure/lib/jmc/test.sh'
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.zip'
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "linux_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init SapMachine-Infrastructure &amp;&amp; cd SapMachine-Infrastructure
                    git fetch --depth 1 https://github.com/SAP/SapMachine-infrastructure.git master
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage("Checkout SapMachine Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init jmc &amp;&amp; cd jmc
                    git remote add origin $JMC_GIT_REPOSITORY
                    git fetch origin $GIT_REF
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage ('Download Prerequisites'){
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/jmc/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build and Basic Tests") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/jmc/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/jmc/build.sh'
            }
        }
        stage("Test") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/jmc/x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                expression { params.TEST == true }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh 'SapMachine-Infrastructure/lib/jmc/test.sh'
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.zip'
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_aarch64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init SapMachine-Infrastructure &amp;&amp; cd SapMachine-Infrastructure
                    git fetch --depth 1 https://github.com/SAP/SapMachine-infrastructure.git master
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage("Checkout SapMachine Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init jmc &amp;&amp; cd jmc
                    git remote add origin $JMC_GIT_REPOSITORY
                    git fetch origin $GIT_REF
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage ('Download Prerequisites'){
            
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build and Basic Tests") {
            
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/jmc/build.sh'
            }
        }
        stage("Test") {
            
            when {
                expression { params.TEST == true }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh 'SapMachine-Infrastructure/lib/jmc/test.sh'
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.zip'
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "macos_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init SapMachine-Infrastructure &amp;&amp; cd SapMachine-Infrastructure
                    git fetch --depth 1 https://github.com/SAP/SapMachine-infrastructure.git master
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage("Checkout SapMachine Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init jmc &amp;&amp; cd jmc
                    git remote add origin $JMC_GIT_REPOSITORY
                    git fetch origin $GIT_REF
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage ('Download Prerequisites'){
            
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build and Basic Tests") {
            
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/jmc/build.sh'
            }
        }
        stage("Test") {
            
            when {
                expression { params.TEST == true }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh 'SapMachine-Infrastructure/lib/jmc/test.sh'
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.zip'
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "windows_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs()
            }
        }
        stage("Checkout Infrastructure Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init SapMachine-Infrastructure &amp;&amp; cd SapMachine-Infrastructure
                    git fetch --depth 1 https://github.com/SAP/SapMachine-infrastructure.git master
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage("Checkout SapMachine Repository") {
            steps {
                sh '''#!/bin/bash
                    set -ex
                    git init jmc &amp;&amp; cd jmc
                    git remote add origin $JMC_GIT_REPOSITORY
                    git fetch origin $GIT_REF
                    git checkout --detach FETCH_HEAD
                '''
            }
        }
        stage ('Download Prerequisites'){
            
            steps {
                // credentials are needed to avoid rate limit exceedance
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build and Basic Tests") {
            
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/jmc/build.sh'
            }
        }
        stage("Test") {
            
            when {
                expression { params.TEST == true }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
                JAVA_HOME = "${WORKSPACE}/boot_jdk"
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
                    sh 'SapMachine-Infrastructure/lib/jmc/test.sh'
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.gz'
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'jmc/target/products/*.zip'
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
    <pendingScript>
      <context />
      <script>pipeline {
    agent {
        label "repository"
    }
    stages {
        stage("Checkout Infrastructure Repository") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage('Update SapMachine JMC Repository') {
            agent {
                dockerfile {
                    dir "SapMachine-Infrastructure/dockerfiles/infrastructure"
                    reuseNode true
                    label "repository"
                }
            }
            when {
                beforeAgent true
                expression { params.UPDATE_REPOSITORY == true }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) {
                    sh("SapMachine-Infrastructure/lib/jmc/update_repo.sh")
                }
            }
        }
        stage("Checkout SapMachine JMC Repository") {
            when {
                expression { params.MERGE_UPSTREAM == true }
            }
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/sap"]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'sapjmc']], userRemoteConfigs: [[url: 'https://github.com/SAP/jmc.git']]]
            }
        }
        stage("Merge from Upstream") {
            when {
                expression { params.MERGE_UPSTREAM == true }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) {
                    sh("SapMachine-Infrastructure/lib/jmc/merge_from_upstream.py")
                }
            }
        }
    }
}
</script>
      <language>groovy</language>
    </pendingScript>
  </pendingScripts>
  <pendingSignatures>
    <pendingSignature>
      <context />
      <signature>staticMethod java.lang.Integer toString int</signature>
      <dangerous>false</dangerous>
    </pendingSignature>
  </pendingSignatures>
  <pendingClasspathEntries />
</scriptApproval>